""""""""""""" < Vundle Setup > """""""""""""""
set nocompatible
filetype off

""" Bootstrap vundle if this is a new install.
if !isdirectory($HOME . '/.vim/bundle/Vundle.vim')
	if executable('git')
		if has('win32') || has ('win64')
			execute '!"git clone https://github.com/gmarik/vundle.git "'
			\ . $HOME . '/.vim/bundle/Vundle.vim""'
		else
			execute '!git clone https://github.com/gmarik/vundle.git "'
			\ . $HOME . '/.vim/bundle/Vundle.vim"'
		endif
		autocmd VimEnter * PluginInstall
	else
		let choice =  confirm("You should get Git to be able to
			\ Install and Update. Continue?", "&Yes\n&No", 2)
		if choice == 2
			quit
		endif
	endif
endif
" Now we can assume the vundle is installed.
""""""""""""" </ Vundle Setup > """""""""""""""

"""""""""""" < Vundle Plugins > """""""""""""""
set rtp+=~/.vim/bundle/Vundle.vim
set rtp+=~/.fzf
call vundle#begin()

" Plugin Management
Plugin 'gmarik/vundle'

" Aesthetics
Plugin 'xolox/vim-misc'
Plugin 'bling/vim-airline'              " Improve the status bar
Plugin 'flazz/vim-colorschemes'
Plugin 'valloric/MatchTagAlways'

" Git
Plugin 'tpope/vim-fugitive'
Plugin 'airblade/vim-gitgutter'         " Show git difs next to line numbers.

" Langauges
Plugin 'scrooloose/syntastic'
Plugin 'sheerun/vim-polyglot'

"" Haskell
Plugin 'dag/vim2hs'
Plugin 'eagletmt/neco-ghc'
Plugin 'bitc/vim-hdevtools'
Plugin 'Shougo/neocomplcache.vim'
Plugin 'lukerandall/haskellmode-vim'
Plugin 'enomsg/vim-haskellConcealPlus'  " Swap in unicode symbols for haskell ops.

"" Web Dev
Plugin 'shawncplus/phpcomplete.vim'

" Searching
Plugin 'ervandew/ag'
Plugin 'kien/ctrlp.vim'                 " Fuzzy file search from current dir.
Plugin 'xolox/vim-easytags'

" Windows and Buffers
Plugin 'majutsushi/tagbar'              " Display ctags in a sidebar.
Plugin 'godlygeek/tabular'
Plugin 'scrooloose/nerdtree'            " File navigation buffer
Plugin 'rbgrouleff/bclose.vim'

call vundle#end()
"""""""""""" </ Vundle Plugins > """""""""""""""

call pathogen#infect()

let mapleader=","
set nocompatible
set viminfo='1000,f1,:1000,/1000
set history=1000

"------  Visual Options  ------
syntax on
set number
set nowrap
set vb
set ruler
"set statusline=%<%f\ %h%m%r%=%{fugitive#statusline()}\ \ %-14.(%l,%c%V%)\ %P
let g:buftabs_only_basename=1
let g:buftabs_marker_modified = "+"

"set listchars=eol:$,tab:>-,trail:~,extends:>,precedes:<

"""------  Generic Behavior  ------
" Use spaces instead of tabs (necessary for haskell/ghc)
set tabstop=2		" Inserts 4 spaces when tab key is pressed.
set softtabstop=2	" Deletes 4 spaces (simulates deleting a tab)
set shiftwidth=2	" Inserts 4 spaces for auto-indentation.
set expandtab		" Insert spaces whenever tab key is pressed.

set hidden
filetype indent on
filetype plugin on
set autoindent
"set expandtab
set wildignore=.svn,CVS,.git,*.o,*.a,*.class,*.mo,*.la,*.so,*.obj,*.swp,*.jpg,*.png,*.xpm,*.gif,node_modules/*

"allow deletion of previously entered data in insert mode
set backspace=indent,eol,start


" F2 = Paste Toggle (in insert mode, pasting indented text behavior changes)
set pastetoggle=<F2>

" Match indentation level when moving to new line.
set autoindent
set smartindent

" Misc.
set clipboard=unnamed 			"Use OS clipboard


""""""""""""" 	< Keymaps > """"""""""""""""""

" Haskell shortcuts
map <Leader>c :w \| SyntasticCheck<CR>
map <Leader>m :w \| make<CR>
map <Leader>r :w \| !runhaskell %<CR>

map <Leader>/ :Ag<SPACE>

" grep the word under the cursor.
nmap <Leader>// :<c-u>execute 'Ag ' .  expand("<cWORD>")<CR>

" Toggle whitespace visibility
nmap <Leader>s :set list!<CR>

nmap <Leader>L :set invnumber<CR>

" Edit and Reload .vimrc files
nmap <silent> <Leader>ev :e $MYVIMRC<CR>
nmap <silent> <Leader>es :so $MYVIMRC<CR>

"type S, then type what you're looking for, a /, and what to replace it with
nmap S :%s//g<LEFT><LEFT>
vmap S :s//g<LEFT><LEFT>

nmap <silent> =j :%!python -m json.tool<CR>:setfiletype json<CR>

nmap <leader>= :TagbarToggle<CR>


" Allow saving of files as sudo when I forgot to start vim using sudo.
cmap w!! %!sudo tee > /dev/null %
" Save a few keystrokes
nnoremap ; :

" ,v = Paste
map <Leader>v "+gP

" ,c = Copy
map <Leader>c "+y

" Accidentally pressing Shift K will no longer open stupid man entry
noremap K <nop>

" When pressing ,cd switch to the directory of the open buffer
map ,cd :cd %:p:h<CR>

" Wtf is Ex Mode anyways?
nnoremap Q <nop>

" < Text Navigation>
" Prevent cursor from moving to beginning of line when switching buffers
set nostartofline

" Keep the cursor in place while joining lines
nnoremap J mzJ`z

" < Window Navigation>
" ,hljk = Move between windows
nnoremap <Leader>h <C-w>h
nnoremap <Leader>l <C-w>l
nnoremap <Leader>j <C-w>j
nnoremap <Leader>k <C-w>k

" < Buffer Navigation>
" Ctrl Left/h & Right/l cycle between buffers
noremap <silent> <C-left> :bprev<CR>
noremap <silent> <C-h> :bprev<CR>
noremap <silent> <C-right> :bnext<CR>
noremap <silent> <C-l> :bnext<CR>

" ,q Closes the current buffer
nnoremap <silent> <Leader>q :Bclose<CR>

" ,Q Closes the current window
nnoremap <silent> <Leader>Q <C-w>c

""""""""""""" 	</ Keymaps > """"""""""""""""""


"------  Searching  ------
set incsearch
set ignorecase
set smartcase
set hlsearch

" Clear search highlights when pressing ,b
nnoremap <silent> <leader>b :nohlsearch<CR>


" When searching for words with * and navigating with N/n, keep line centered vertically
nnoremap n nzz
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

" CtrlP will load from the CWD, makes it easier with all these nested repos
let g:ctrlp_working_path_mode = ''



""""""""""""" < NerdTree > """"""""""""""""""
" Always open NerdTree along with files
" and switch focus to file
au VimEnter * NERDTree | wincmd p

let NERDTreeIgnore=['CVS','\.dSYM$']

"setting root dir in NT also sets VIM's cd
let NERDTreeChDirMode=2

let g:NERDTreeDirArrows=0
" Toggle visibility using ,n
noremap <silent> <Leader>n :NERDTreeToggle<CR>

" These prevent accidentally loading files while focused on NERDTree
autocmd FileType nerdtree noremap <buffer> <c-left> <nop>
autocmd FileType nerdtree noremap <buffer> <c-h> <nop>
autocmd FileType nerdtree noremap <buffer> <c-right> <nop>
autocmd FileType nerdtree noremap <buffer> <c-l> <nop>

" Open NERDTree if we're executing vim without specifying a file to open
autocmd vimenter * if !argc() | NERDTree | endif

" Close if only NERDTree open
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTreeType") && b:NERDTreeType == "primary") | q | endif

" Hides "Press ? for help"
let NERDTreeMinimalUI=1
""""""""""""" </ NerdTree > """"""""""""""""""



" ,ct = Builds ctags
map <Leader>ct :! /usr/local/bin/ctags -R *<CR>


"------  Fugitive Plugin Options  ------
"https://github.com/tpope/vim-fugitive
nnoremap <Leader>gs :Gstatus<CR>
nnoremap <Leader>gr :Gremove<CR>
nnoremap <Leader>gl :Glog<CR>
nnoremap <Leader>gb :Gblame<CR>
nnoremap <Leader>gm :Gmove
nnoremap <Leader>gp :Ggrep
nnoremap <Leader>gR :Gread<CR>
nnoremap <Leader>gg :Git
nnoremap <Leader>gd :Gdiff<CR>


"------  Text Editing Utilities  ------
" ,T = Delete all Trailing space in file
map <Leader>T :%s/\s\+$//<CR>

" ,U = Deletes Unwanted empty lines
map <Leader>U :g/^$/d<CR>

" ,R = Converts tabs to spaces in document
map <Leader>R :retab<CR>

" Deletes trailing space in file upon write
" autocmd BufWritePre * :%s/\s\+$//e


"------  JSON Filetype Settings  ------
au BufRead,BufNewFile *.json set filetype=json
let g:vim_json_syntax_conceal = 0


"------  CoffeeScript Filetype Settings  ------
au BufNewFile,BufReadPost *.coffee set shiftwidth=2 softtabstop=2 expandtab
autocmd BufNewFile,BufRead *.coffee set filetype=coffee
au BufWritePost *.coffee silent make!
autocmd QuickFixCmdPost * nested cwindow | redraw!


"------  PHP Filetype Settings  ------
" ,p = Runs PHP lint checker on current file
map <Leader>p :! php -l %<CR>

" ,P = Runs PHP and executes the current file
map <Leader>P :! php -q %<CR>

au FileType php set omnifunc=phpcomplete#CompletePHP

" Swipe to move between bufers :D
map <silent> <SwipeLeft> :bprev<CR>
map <silent> <SwipeRight> :bnext<CR>

" Cmd+Shift+N = new buffer
" map <silent> <Leader>n :enew<CR>

" Cmd+t = new tab
nnoremap <silent> <Leader>t :tabnew<CR>

" Cmd+w = close tab (this should happen by default)
nnoremap <silent> <Leader>w :tabclose<CR>

" GUI Settings
set t_Co=256
colorscheme Mustang
set mouse=a

"""------  Local Overrides  ------
if filereadable($HOME.'/.dotfiles/vim/vimrc.local')
	source $HOME/.dotfiles/vim/vimrc.local
endif

set showmatch " Show matching parens
set smartcase " Ignore case if searching all lowercase
set smarttab  " Indents based on sw, not ts
set hlsearch  " Highlight search terms
set incsearch " Show search matches as typed

set backspace=indent,eol,start " Allow backspace over anything
set ffs=unix                   " Default to Unix LF line endings


""" Misc.
set clipboard=unnamed " Use OS clipboard
set noswapfile        " Use version control instead

highlight OverLength ctermbg=red ctermfg=white guibg=#660000 " Column 80 marker
match OverLength /\%81v.\+/

" Sane vimdiff colorscheme
highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red

" Map to run xmllint on current file
map @@x !%xmllint --format --recover -^M

" Function for cleaning an XML document
function! DoCleanXML()
	silent %!xmllint --format --encode utf-8 -
	g/xml version=/d
endfunction

command! CleanXML call DoCleanXML()

set tags=./tags;
"
" Custom commands for NERDTree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

au FileType haskell nnoremap <buffer> <F1> :HdevtoolsType<CR>
au FileType haskell nnoremap <buffer> <silent> <F2> :HdevtoolsClear<CR>
au FileType haskell nnoremap <buffer> <silent> <F3> :HdevtoolsInfo<CR>


au FileType haskell autocmd VimEnter * hi clear Conceal        " Remove background color from concealed characters (grey on grey??)
autocmd FileType * nested :call tagbar#autoopen(0)
set foldlevelstart=20                                           " Automatically unfold everything at startup

au BufEnter *.hs compiler ghc
let g:haddock_browser="/usr/bin/links"
let g:haddock_docdir="/opt/docs/haddock"
let g:haddock_browser_callformat = '%s "%s"'



set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 0
let g:syntastic_check_on_open = 0
let g:syntastic_check_on_wq = 0

let g:syntastic_haskell_ghc_mod_args = '-g -fno-warn-missing-signatures'
let g:syntastic_enable_signs=1

set laststatus=2
set statusline=%<%f\    					" Filename
set statusline+=%w%h%m%r 					" Options
set statusline+=%{fugitive#statusline()}	" Git hotness
set statusline+=\ [%{&ff}/%Y]            	" filetype
set statusline+=\ [%{getcwd()}]          	" current dir
set statusline+=%=%-14.(%l,%c%V%)\ %p%%  	" Right aligned file nav info


let g:tagbar_autofocus = 1
let g:tagbar_compact = 1

map <silent> tu :call GHC_BrowseAll()<CR>
let g:tagbar_type_haskell = {
    \ 'ctagsbin'  : 'hasktags',
    \ 'ctagsargs' : '-x -c -o-',
    \ 'kinds'     : [
        \  'm:modules:0:1',
        \  'd:data: 0:1',
        \  'd_gadt: data gadt:0:1',
        \  't:type names:0:1',
        \  'nt:new types:0:1',
        \  'c:classes:0:1',
        \  'cons:constructors:1:1',
        \  'c_gadt:constructor gadt:1:1',
        \  'c_a:constructor accessors:1:1',
        \  'ft:function types:1:1',
        \  'fi:function implementations:0:1',
        \  'o:others:0:1'
    \ ],
    \ 'sro'        : '.',
    \ 'kind2scope' : {
        \ 'm' : 'module',
        \ 'c' : 'class',
        \ 'd' : 'data',
        \ 't' : 'type'
    \ },
    \ 'scope2kind' : {
        \ 'module' : 'm',
        \ 'class'  : 'c',
        \ 'data'   : 'd',
        \ 'type'   : 't'
    \ }
\ }

" Turn on HTML tag matching
runtime macros/matchit.vim

let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_working_path_mode='ra'

let g:ackprg = 'ag --vimgrep'

" Close NerdTree if it is the only buffer left open.
function! NERDTreeQuit()
  redir => buffersoutput
  silent buffers
  redir END
"                     1BufNo  2Mods.     3File           4LineNo
  let pattern = '^\s*\(\d\+\)\(.....\) "\(.*\)"\s\+line \(\d\+\)$'
  let windowfound = 0

  for bline in split(buffersoutput, "\n")
    let m = matchlist(bline, pattern)

    if (len(m) > 0)
      if (m[2] =~ '..a..')
        let windowfound = 1
      endif
    endif
  endfor

  if (!windowfound)
    quitall
  endif
endfunction
autocmd WinEnter * call NERDTreeQuit()

" Make sure unicode works properly (primarily for concealing)
set encoding=utf-8
let &termencoding=&encoding

" Remove trailing whitespace before writing (applies to all files)
autocmd BufWritePre * :%s/\s\+$//e

" Recognize .md files as markdown
autocmd BufNewFile,BufReadPost *.md set filetype=markdown

if executable('ag')
    set grepprg=ag\ --nogroup\ --nocolor
    let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'
    let g:ctrlp_use_caching=0
endif

" For the love of god, don't grep min files!
set wildignore+=*.min,*.min.js,*.tmp,*.svg

# LLM REPL - Interactive Research Assistant

# === V3 (Current) Commands ===

# Default: Run V3-minimal (bottom-up Sacred Timeline) - auto-launches Kitty if needed
run: test
	@if [ "$TERM" != "xterm-kitty" ]; then \
		echo "🐱 LLM REPL requires Kitty terminal for proper Shift+Enter support"; \
		echo "📦 Launching Kitty with optimized configuration..."; \
		if command -v kitty >/dev/null 2>&1; then \
			kitty --config V3-minimal/kitty-llm-repl.conf --title "LLM REPL V3-minimal" --directory "$(pwd)/V3-minimal" pdm run python -m src.main; \
		else \
			echo "❌ Kitty not found. Please install: sudo pacman -S kitty (Arch) or sudo apt install kitty (Ubuntu)"; \
			echo "🔄 Falling back to current terminal (Shift+Enter may not work properly)"; \
			cd V3-minimal && export PATH="/home/dzack/.local/bin:/usr/bin:$$PATH" && pdm run python -m src.main; \
		fi; \
	else \
		echo "✅ Running in Kitty terminal"; \
		cd V3-minimal && export PATH="/home/dzack/.local/bin:/usr/bin:$$PATH" && pdm run python -m src.main; \
	fi

# Quick run without tests (for development)
run-dev:
	@if [ "$TERM" != "xterm-kitty" ]; then \
		echo "🐱 LLM REPL requires Kitty terminal for proper Shift+Enter support"; \
		echo "📦 Launching Kitty with optimized configuration..."; \
		if command -v kitty >/dev/null 2>&1; then \
			kitty --config V3-minimal/kitty-llm-repl.conf --title "LLM REPL V3-minimal" --directory "$(pwd)/V3-minimal" pdm run python -m src.main; \
		else \
			echo "❌ Kitty not found. Please install: sudo pacman -S kitty (Arch) or sudo apt install kitty (Ubuntu)"; \
			echo "🔄 Falling back to current terminal (Shift+Enter may not work properly)"; \
			cd V3-minimal && export PATH="/home/dzack/.local/bin:/usr/bin:$$PATH" && pdm run python -m src.main; \
		fi; \
	else \
		echo "✅ Running in Kitty terminal"; \
		cd V3-minimal && export PATH="/home/dzack/.local/bin:/usr/bin:$$PATH" && pdm run python -m src.main; \
	fi

run-background:
	@echo "Starting V3-minimal in background..."
	nohup sh -c "cd V3-minimal && export PATH=\"/home/dzack/.local/bin:/usr/bin:$PATH\" && pdm run python -m src.main" > /dev/null 2>&1 &
	@echo "V3-minimal started in background. Check logs for output or use 'just kill-app' to stop."

kill-app:
	@echo "Attempting to kill V3-minimal background process..."
	pkill -f "python -m src.main" || echo "No V3-minimal process found."
	@echo "V3-minimal background process killed (if found)."

# Run V3-Elia (Elia-based implementation)
run-elia:
	cd V3 && uv run elia

# Run V3 foundation (our custom implementation) 
run-v3: lint-v3
	cd V3 && source venv/bin/activate && python main.py --config debug

# Run V3 legacy without linting (for development)
run-v3-dev:
	cd V3 && source venv/bin/activate && python main.py --config debug

# === V2 (Legacy) Commands ===

# V2: Run original broken V2 system
run-2:
	python V2/main.py --config debug

# V2.5: Run V2-5-0-tkinter-rewrite (desktop GUI)
run-2-5:
	python V2-5-0-tkinter-rewrite/main.py --config debug

# V3: Mixed mode - Ollama for intent detection, Groq for chat  
run-mixed: lint-v3
	cd V3 && source venv/bin/activate && python main.py --config mixed

# V3: Fast mode - Groq for everything
run-fast: lint-v3
	cd V3 && source venv/bin/activate && python main.py --config fast

# === Test-First Development Commands (MANDATORY) ===

# Create a new failing acceptance test for a feature
create-test FEATURE_NAME:
	@bash scripts/dim_echo.sh "🧪 Creating acceptance test for: {{FEATURE_NAME}}"
	@mkdir -p V3-minimal/tests
	@echo 'import pytest' > V3-minimal/tests/test_{{FEATURE_NAME}}.py
	@echo 'from textual.testing import AppTest' >> V3-minimal/tests/test_{{FEATURE_NAME}}.py
	@echo 'from src.main import LLMReplApp' >> V3-minimal/tests/test_{{FEATURE_NAME}}.py
	@echo '' >> V3-minimal/tests/test_{{FEATURE_NAME}}.py
	@echo '@pytest.mark.asyncio' >> V3-minimal/tests/test_{{FEATURE_NAME}}.py
	@echo 'async def test_{{FEATURE_NAME}}_user_interaction():' >> V3-minimal/tests/test_{{FEATURE_NAME}}.py
	@echo '    """User interacts with {{FEATURE_NAME}} feature."""' >> V3-minimal/tests/test_{{FEATURE_NAME}}.py
	@echo '    async with LLMReplApp().run_test() as pilot:' >> V3-minimal/tests/test_{{FEATURE_NAME}}.py
	@echo '        # TODO: Define the user interaction you want to work' >> V3-minimal/tests/test_{{FEATURE_NAME}}.py
	@echo '        # This test should FAIL until you implement the feature' >> V3-minimal/tests/test_{{FEATURE_NAME}}.py
	@echo '        ' >> V3-minimal/tests/test_{{FEATURE_NAME}}.py
	@echo '        # Example: User types something and expects a result' >> V3-minimal/tests/test_{{FEATURE_NAME}}.py
	@echo '        await pilot.press("h", "i")' >> V3-minimal/tests/test_{{FEATURE_NAME}}.py
	@echo '        await pilot.press("enter")' >> V3-minimal/tests/test_{{FEATURE_NAME}}.py
	@echo '        ' >> V3-minimal/tests/test_{{FEATURE_NAME}}.py
	@echo '        # TODO: Replace with actual assertion about user-visible behavior' >> V3-minimal/tests/test_{{FEATURE_NAME}}.py
	@echo '        assert False, "Test not implemented - define desired behavior for {{FEATURE_NAME}}"' >> V3-minimal/tests/test_{{FEATURE_NAME}}.py
	@echo "✅ Created test file: tests/test_{{FEATURE_NAME}}.py"
	@echo "📝 Now edit the test to define the desired behavior"
	@echo "🏃 Then run: just verify-failing test_{{FEATURE_NAME}}"

# Verify that a test is properly failing
verify-failing TEST_NAME:
	@bash scripts/dim_echo.sh "🔍 Verifying test is failing: {{TEST_NAME}}"
	@cd V3-minimal && export PATH="/home/dzack/.local/bin:/usr/bin:$$PATH" && \
	if pdm run pytest tests/{{TEST_NAME}}.py -xvs; then \
		echo "❌ ERROR: Test is PASSING! It should be failing."; \
		echo "📝 Edit the test to expect behavior that doesn't exist yet"; \
		exit 1; \
	else \
		echo "✅ Good! Test is properly failing."; \
		echo "🚧 Now you can implement the feature to make it pass"; \
	fi

# Run only acceptance tests (no linting, just user behavior)
test-acceptance:
	@bash scripts/dim_echo.sh "🧪 Running acceptance tests only..."
	cd V3-minimal && export PATH="/home/dzack/.local/bin:/usr/bin:$$PATH" && \
	pdm run pytest tests/ -v --tb=short -k "not test_unit and not test_integration"

# Check which source files lack tests
check-coverage:
	@bash scripts/dim_echo.sh "📊 Checking test coverage..."
	@bash scripts/check-test-coverage.sh

# === Testing Commands ===

# Run comprehensive test suite (linters + tests) for V3-minimal  
test: validate-markup validate-css
	@bash scripts/run-with-checks.sh bash -c " \
	bash scripts/dim_echo.sh '🧪 Running comprehensive test suite for V3-minimal...' 2>/dev/null || echo '🧪 Running comprehensive test suite for V3-minimal...'; \
	cd V3-minimal && export PATH='/home/dzack/.local/bin:/usr/bin:$PATH' && \
	(bash ../scripts/dim_echo.sh '🎨 Auto-formatting code...' 2>/dev/null || echo '🎨 Auto-formatting code...') && \
	pdm run black src/ tests/ && \
	pdm run ruff check --fix src/ tests/ && \
	(bash ../scripts/dim_echo.sh '📋 Running Ruff linter...' 2>/dev/null || echo '📋 Running Ruff linter...') && \
	pdm run ruff check src/ tests/ && \
	(bash ../scripts/dim_echo.sh '🎨 Running Black formatter check...' 2>/dev/null || echo '🎨 Running Black formatter check...') && \
	pdm run black --check --diff src/ tests/ && \
	(bash ../scripts/dim_echo.sh '🔍 Running MyPy type checker...' 2>/dev/null || echo '🔍 Running MyPy type checker...') && \
	pdm run mypy src/ && \
	(bash ../scripts/dim_echo.sh '🧪 Running pytest...' 2>/dev/null || echo '🧪 Running pytest...') && \
	pdm run pytest tests/ -v --tb=short && \
	(bash ../scripts/dim_echo.sh '✅ All tests passed!' 2>/dev/null || echo '✅ All tests passed!')"

# Quick lint-only check for V3-minimal
lint:
	@bash scripts/dim_echo.sh "🔧 Running linters for V3-minimal..."
	cd V3-minimal && export PATH="/home/dzack/.local/bin:/usr/bin:$$PATH" && \
	bash ../scripts/dim_echo.sh "🎨 Auto-formatting code..." && \
	pdm run black src/ tests/ && \
	pdm run ruff check --fix src/ tests/ && \
	bash ../scripts/dim_echo.sh "📋 Running linters..." && \
	pdm run ruff check src/ tests/ && \
	pdm run black --check src/ tests/ && \
	pdm run mypy src/ && \

# Fix formatting automatically 
format:
	@bash scripts/dim_echo.sh "🎨 Auto-formatting V3-minimal code..."
	cd V3-minimal && export PATH="/home/dzack/.local/bin:/usr/bin:$$PATH" && \
	pdm run black src/ tests/ && \
	pdm run ruff check --fix src/ tests/

# Run comprehensive test suite for V3 (legacy)
test-v3:
	cd V3 && source venv/bin/activate && python -m pytest tests/ -v

# Run V2 legacy tests
test-2:
	python -m pytest tests/ -v

# Run type checking and correctness checks for V3 (legacy)
lint-v3-legacy:
	@echo "Running type checking for V3..."
	cd V3 && source venv/bin/activate && mypy --explicit-package-bases . --exclude venv --ignore-missing-imports
	@echo "Running correctness checks with flake8..."
	cd V3 && source venv/bin/activate && flake8 . --exclude=venv --select=E9,F63,F7,F82 --max-line-length=120

# Quick lint for development (ignores type warnings)
lint-v3:
	@echo "Running quick lint for V3..."
	cd V3 && source venv/bin/activate && flake8 . --exclude=venv --select=E9,F63,F7,F82 --max-line-length=120

# Run type checking for V2 legacy
lint-2:
	@echo "Running type checking with mypy..."
	python -m mypy V2/ --ignore-missing-imports --strict-optional
	@echo "Running correctness checks with flake8..."
	python -m flake8 V2/ --select=E9,F63,F7,F82 --max-line-length=120


# Install dependencies
install:
	pip install -r requirements.txt

# Show available configurations
show-configs:
	@echo "Available LLM configurations:"
	@echo "  debug: Ollama for everything (default)"
	@echo "  mixed: Ollama for intent, Groq for chat"
	@echo "  fast: Groq for everything"

# Validate markup syntax in the codebase
validate-markup:
	@(bash scripts/dim_echo.sh "🔍 Validating Rich markup syntax..." 2>/dev/null || echo "🔍 Validating Rich markup syntax...")
	cd V3-minimal && export PATH="/home/dzack/.local/bin:/usr/bin:$$PATH" && pdm run python -m src.markup_validator src/

# Validate CSS syntax with stylelint (if available)
validate-css:
	@(bash scripts/dim_echo.sh "🎨 Validating CSS syntax..." 2>/dev/null || echo "🎨 Validating CSS syntax...")
	@if command -v stylelint >/dev/null 2>&1; then \
		echo "Running stylelint on .tcss files..."; \
		find V3-minimal/src -name "*.tcss" -exec stylelint {} \; || echo "CSS linting found issues"; \
	else \
		echo "stylelint not found - skipping CSS validation (install with: npm install -g stylelint)"; \
		echo "Basic syntax check - ensuring .tcss files exist:"; \
		find V3-minimal/src -name "*.tcss" -exec echo "✓ Found: {}" \;; \
	fi

# === V3.1 Ledger Development Commands ===

# Start working on a V3.1 ledger (creates TodoWrite tasks for phases)
start-ledger LEDGER_NAME:
	@bash scripts/dim_echo.sh "📋 Starting ledger: {{LEDGER_NAME}}"
	@pdm run python scripts/ledger_tracker.py start {{LEDGER_NAME}}

# Move to next phase of current ledger
next-phase LEDGER_NAME:
	@bash scripts/dim_echo.sh "➡️ Moving to next phase: {{LEDGER_NAME}}"
	@pdm run python scripts/ledger_tracker.py next {{LEDGER_NAME}}

# Test current ledger implementation
test-ledger LEDGER_NAME:
	@bash scripts/dim_echo.sh "🧪 Testing ledger: {{LEDGER_NAME}}"
	@pdm run python scripts/ledger_tracker.py test {{LEDGER_NAME}}

# Request human review for a ledger
ledger-request-review LEDGER_NAME:
	@bash scripts/dim_echo.sh "🔍 Requesting human review for: {{LEDGER_NAME}}"
	@pdm run python scripts/ledger_tracker.py request-review {{LEDGER_NAME}}

# Approve a ledger review (HUMAN ONLY)
ledger-approve-review LEDGER_NAME:
	@bash scripts/dim_echo.sh "✅ Approving review for: {{LEDGER_NAME}}"
	@pdm run python scripts/ledger_tracker.py approve-review {{LEDGER_NAME}}

# Reject a ledger review (HUMAN ONLY)
ledger-reject-review LEDGER_NAME FEEDBACK:
	@bash scripts/dim_echo.sh "❌ Rejecting review for: {{LEDGER_NAME}}"
	@pdm run python scripts/ledger_tracker.py reject-review {{LEDGER_NAME}} "{{FEEDBACK}}"

# Complete and archive a ledger (requires sudo)
complete-ledger LEDGER_NAME:
	@bash scripts/dim_echo.sh "✅ Completing ledger: {{LEDGER_NAME}}"
	@sudo pdm run python scripts/ledger_tracker.py complete {{LEDGER_NAME}}
	@git add .ai/ledgers/v3.1/
	@git commit -m "Complete ledger: {{LEDGER_NAME}} 🤖 Generated with Claude Code"

# Show ledger development status dashboard
ledger-status:
	@pdm run python scripts/ledger_tracker.py status

# Help
help:
	@echo "LLM REPL - Available commands:"
	@echo ""
	@echo "Test-First Development (MANDATORY):"
	@echo "  just create-test <feature>  - Create failing acceptance test"
	@echo "  just verify-failing <test>  - Verify test fails properly"
	@echo "  just test-acceptance        - Run acceptance tests only"
	@echo "  just check-coverage         - Check which files lack tests"
	@echo ""
	@echo "V3-minimal (Current - Kitty Terminal Optimized):"
	@echo "  just run         - Run V3-minimal with tests (auto-launches Kitty)"
	@echo "  just run-dev     - Run V3-minimal without tests (auto-launches Kitty)"
	@echo "  just test        - Run V3-minimal test suite"
	@echo "  just lint        - Run V3-minimal type checking"
	@echo "  just validate-markup - Validate Rich markup syntax"
	@echo ""
	@echo "V3.1 Ledger Development:"
	@echo "  just start-ledger <name>    - Start working on a ledger"
	@echo "  just test-ledger <name>     - Test ledger implementation"
	@echo "  just complete-ledger <name> - Complete and archive ledger"
	@echo "  just ledger-status          - Show development dashboard"
	@echo ""
	@echo "V3 (Legacy Terminal Implementation):"
	@echo "  just run-v3      - Run V3 interactive mode (Ollama debug)"
	@echo "  just run-v3-dev  - Run V3 without linting"
	@echo "  just run-mixed   - Run V3 interactive mode (Ollama+Groq)"
	@echo "  just run-fast    - Run V3 interactive mode (Groq only)"
	@echo ""
	@echo "V2 (Legacy):"
	@echo "  just run-2       - Run V2 original (broken)"
	@echo "  just run-2-5     - Run V2-tkinter-rewrite (desktop GUI)"
	@echo "  just test-2      - Run V2 test suite"
	@echo "  just lint-2      - Run V2 type checking"
	@echo ""
	@echo "General:"
	@echo "  just install     - Install dependencies"
	@echo "  just help        - Show this help"


# LLM REPL - Interactive Research Assistant

# === V3 (Current) Commands ===

# Default: Run V3-minimal (bottom-up Sacred Timeline) - auto-launches Kitty if needed
run: test validate-markup
	@if [ "$TERM" != "xterm-kitty" ]; then \
		echo "üê± LLM REPL requires Kitty terminal for proper Shift+Enter support"; \
		echo "üì¶ Launching Kitty with optimized configuration..."; \
		if command -v kitty >/dev/null 2>&1; then \
			kitty --config V3-minimal/kitty-llm-repl.conf --title "LLM REPL V3-minimal" --directory "$(pwd)/V3-minimal" pdm run python -m src.main; \
		else \
			echo "‚ùå Kitty not found. Please install: sudo pacman -S kitty (Arch) or sudo apt install kitty (Ubuntu)"; \
			echo "üîÑ Falling back to current terminal (Shift+Enter may not work properly)"; \
			cd V3-minimal && export PATH="/home/dzack/.local/bin:/usr/bin:$$PATH" && pdm run python -m src.main; \
		fi; \
	else \
		echo "‚úÖ Running in Kitty terminal"; \
		cd V3-minimal && export PATH="/home/dzack/.local/bin:/usr/bin:$$PATH" && pdm run python -m src.main; \
	fi

# Quick run without tests (for development)
run-dev:
	@if [ "$TERM" != "xterm-kitty" ]; then \
		echo "üê± LLM REPL requires Kitty terminal for proper Shift+Enter support"; \
		echo "üì¶ Launching Kitty with optimized configuration..."; \
		if command -v kitty >/dev/null 2>&1; then \
			kitty --config V3-minimal/kitty-llm-repl.conf --title "LLM REPL V3-minimal" --directory "$(pwd)/V3-minimal" pdm run python -m src.main; \
		else \
			echo "‚ùå Kitty not found. Please install: sudo pacman -S kitty (Arch) or sudo apt install kitty (Ubuntu)"; \
			echo "üîÑ Falling back to current terminal (Shift+Enter may not work properly)"; \
			cd V3-minimal && export PATH="/home/dzack/.local/bin:/usr/bin:$$PATH" && pdm run python -m src.main; \
		fi; \
	else \
		echo "‚úÖ Running in Kitty terminal"; \
		cd V3-minimal && export PATH="/home/dzack/.local/bin:/usr/bin:$$PATH" && pdm run python -m src.main; \
	fi

run-background:
	@echo "Starting V3-minimal in background..."
	nohup sh -c "cd V3-minimal && export PATH=\"/home/dzack/.local/bin:/usr/bin:$PATH\" && pdm run python -m src.main" > /dev/null 2>&1 &
	@echo "V3-minimal started in background. Check logs for output or use 'just kill-app' to stop."

kill-app:
	@echo "Attempting to kill V3-minimal background process..."
	pkill -f "python -m src.main" || echo "No V3-minimal process found."
	@echo "V3-minimal background process killed (if found)."

# Run V3-Elia (Elia-based implementation)
run-elia:
	cd V3 && uv run elia

# Run V3 foundation (our custom implementation) 
run-v3: lint-v3
	cd V3 && source venv/bin/activate && python main.py --config debug

# Run V3 legacy without linting (for development)
run-v3-dev:
	cd V3 && source venv/bin/activate && python main.py --config debug

# === V2 (Legacy) Commands ===

# V2: Run original broken V2 system
run-2:
	python V2/main.py --config debug

# V2.5: Run V2-5-0-tkinter-rewrite (desktop GUI)
run-2-5:
	python V2-5-0-tkinter-rewrite/main.py --config debug

# V3: Mixed mode - Ollama for intent detection, Groq for chat  
run-mixed: lint-v3
	cd V3 && source venv/bin/activate && python main.py --config mixed

# V3: Fast mode - Groq for everything
run-fast: lint-v3
	cd V3 && source venv/bin/activate && python main.py --config fast

# === Testing Commands ===

# Run comprehensive test suite (linters + tests) for V3-minimal
test: validate-markup
	@bash scripts/dim_echo.sh "üß™ Running comprehensive test suite for V3-minimal..."
	cd V3-minimal && export PATH="/home/dzack/.local/bin:/usr/bin:$$PATH" && \
	bash ../scripts/dim_echo.sh "üé® Auto-formatting code..." && \
	pdm run black src/ tests/ && \
	pdm run ruff check --fix src/ tests/ && \
	bash ../scripts/dim_echo.sh "üìã Running Ruff linter..." && \
	pdm run ruff check src/ tests/ && \
	bash ../scripts/dim_echo.sh "üé® Running Black formatter check..." && \
	pdm run black --check --diff src/ tests/ && \
	bash ../scripts/dim_echo.sh "üîç Running MyPy type checker..." && \
	pdm run mypy src/ && \
	bash ../scripts/dim_echo.sh "üß™ Running pytest..." && \
	pdm run pytest tests/ -v --tb=short && \
	bash ../scripts/dim_echo.sh "‚úÖ All tests passed!"

# Quick lint-only check for V3-minimal
lint:
	@bash scripts/dim_echo.sh "üîß Running linters for V3-minimal..."
	cd V3-minimal && export PATH="/home/dzack/.local/bin:/usr/bin:$$PATH" && \
	bash ../scripts/dim_echo.sh "üé® Auto-formatting code..." && \
	pdm run black src/ tests/ && \
	pdm run ruff check --fix src/ tests/ && \
	bash ../scripts/dim_echo.sh "üìã Running linters..." && \
	pdm run ruff check src/ tests/ && \
	pdm run black --check src/ tests/ && \
	pdm run mypy src/ && \

# Fix formatting automatically 
format:
	@bash scripts/dim_echo.sh "üé® Auto-formatting V3-minimal code..."
	cd V3-minimal && export PATH="/home/dzack/.local/bin:/usr/bin:$$PATH" && \
	pdm run black src/ tests/ && \
	pdm run ruff check --fix src/ tests/

# Run comprehensive test suite for V3 (legacy)
test-v3:
	cd V3 && source venv/bin/activate && python -m pytest tests/ -v

# Run V2 legacy tests
test-2:
	python -m pytest tests/ -v

# Run type checking and correctness checks for V3 (legacy)
lint-v3-legacy:
	@echo "Running type checking for V3..."
	cd V3 && source venv/bin/activate && mypy --explicit-package-bases . --exclude venv --ignore-missing-imports
	@echo "Running correctness checks with flake8..."
	cd V3 && source venv/bin/activate && flake8 . --exclude=venv --select=E9,F63,F7,F82 --max-line-length=120

# Quick lint for development (ignores type warnings)
lint-v3:
	@echo "Running quick lint for V3..."
	cd V3 && source venv/bin/activate && flake8 . --exclude=venv --select=E9,F63,F7,F82 --max-line-length=120

# Run type checking for V2 legacy
lint-2:
	@echo "Running type checking with mypy..."
	python -m mypy V2/ --ignore-missing-imports --strict-optional
	@echo "Running correctness checks with flake8..."
	python -m flake8 V2/ --select=E9,F63,F7,F82 --max-line-length=120


# Install dependencies
install:
	pip install -r requirements.txt

# Show available configurations
show-configs:
	@echo "Available LLM configurations:"
	@echo "  debug: Ollama for everything (default)"
	@echo "  mixed: Ollama for intent, Groq for chat"
	@echo "  fast: Groq for everything"

# Validate markup syntax in the codebase
validate-markup:
	@bash scripts/dim_echo.sh "üîç Validating Rich markup syntax..."
	cd V3-minimal && export PATH="/home/dzack/.local/bin:/usr/bin:$$PATH" && pdm run python -m src.markup_validator src/

# === V3.1 Ledger Development Commands ===

# Start working on a V3.1 ledger (creates TodoWrite tasks for phases)
start-ledger LEDGER_NAME:
	@bash scripts/dim_echo.sh "üìã Starting ledger: {{LEDGER_NAME}}"
	@python scripts/ledger_tracker.py start {{LEDGER_NAME}}

# Move to next phase of current ledger
next-phase LEDGER_NAME:
	@bash scripts/dim_echo.sh "‚û°Ô∏è Moving to next phase: {{LEDGER_NAME}}"
	@python scripts/ledger_tracker.py next {{LEDGER_NAME}}

# Test current ledger implementation
test-ledger LEDGER_NAME:
	@bash scripts/dim_echo.sh "üß™ Testing ledger: {{LEDGER_NAME}}"
	@python scripts/ledger_tracker.py test {{LEDGER_NAME}}

# Complete and archive a ledger
complete-ledger LEDGER_NAME:
	@bash scripts/dim_echo.sh "‚úÖ Completing ledger: {{LEDGER_NAME}}"
	@python scripts/ledger_tracker.py complete {{LEDGER_NAME}}
	@git add .ai/ledgers/v3.1/
	@git commit -m "Complete ledger: {{LEDGER_NAME}} ü§ñ Generated with Claude Code"

# Show ledger development status dashboard
ledger-status:
	@python scripts/ledger_tracker.py status

# Help
help:
	@echo "LLM REPL - Available commands:"
	@echo ""
	@echo "V3-minimal (Current - Kitty Terminal Optimized):"
	@echo "  just run         - Run V3-minimal with tests (auto-launches Kitty)"
	@echo "  just run-dev     - Run V3-minimal without tests (auto-launches Kitty)"
	@echo "  just test        - Run V3-minimal test suite"
	@echo "  just lint        - Run V3-minimal type checking"
	@echo "  just validate-markup - Validate Rich markup syntax"
	@echo ""
	@echo "V3.1 Ledger Development:"
	@echo "  just start-ledger <name>    - Start working on a ledger"
	@echo "  just test-ledger <name>     - Test ledger implementation"
	@echo "  just complete-ledger <name> - Complete and archive ledger"
	@echo "  just ledger-status          - Show development dashboard"
	@echo ""
	@echo "V3 (Legacy Terminal Implementation):"
	@echo "  just run-v3      - Run V3 interactive mode (Ollama debug)"
	@echo "  just run-v3-dev  - Run V3 without linting"
	@echo "  just run-mixed   - Run V3 interactive mode (Ollama+Groq)"
	@echo "  just run-fast    - Run V3 interactive mode (Groq only)"
	@echo ""
	@echo "V2 (Legacy):"
	@echo "  just run-2       - Run V2 original (broken)"
	@echo "  just run-2-5     - Run V2-tkinter-rewrite (desktop GUI)"
	@echo "  just test-2      - Run V2 test suite"
	@echo "  just lint-2      - Run V2 type checking"
	@echo ""
	@echo "General:"
	@echo "  just install     - Install dependencies"
	@echo "  just help        - Show this help"


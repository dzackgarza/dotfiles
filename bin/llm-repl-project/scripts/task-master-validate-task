#!/bin/bash

# Task Master validate-task command wrapper
# Validates task completion with user story proof

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$SCRIPT_DIR"

# Default values
TASK_ID=""
REQUIRE_STORY=true
HELP=false

# Function to display help
show_help() {
    cat << EOF
Task Master validate-task Command

Validate that a task can be marked complete based on TDD user story proof.

Usage:
    task-master-validate-task --id=<task_id> [--no-require-story]

Options:
    --id=<task_id>          Task ID to validate (required)
    --no-require-story      Skip user story requirement (not recommended)
    --help                  Show this help message

Examples:
    task-master-validate-task --id=47
    task-master-validate-task --id=47 --no-require-story

Description:
    This command validates that a task meets all TDD requirements:
    1. User story exists and has been generated
    2. User story test has been run (temporal grid exists)
    3. Test results show "passing" status
    4. Temporal grid proof is recent (within 24 hours)

Validation Criteria:
    ‚úì User story exists for the task
    ‚úì Story status is "passing" (not "pending", "generated", or "failing")
    ‚úì Temporal grid file exists and is accessible
    ‚úì Test was run recently (within 24 hours)

Output:
    - Validation result (valid/invalid)
    - Detailed reason if validation fails
    - Suggestions for fixing validation issues
    - Path to temporal grid proof

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --id=*)
            TASK_ID="${1#*=}"
            shift
            ;;
        --no-require-story)
            REQUIRE_STORY=false
            shift
            ;;
        --help)
            HELP=true
            shift
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Show help if requested
if [ "$HELP" = true ]; then
    show_help
    exit 0
fi

# Validate required arguments
if [ -z "$TASK_ID" ]; then
    echo "Error: --id parameter is required"
    echo "Use --help for usage information"
    exit 1
fi

# Check if we're in a Task Master project
if [ ! -f "$PROJECT_ROOT/.taskmaster/config.json" ]; then
    echo "Error: Not in a Task Master project directory"
    echo "Run 'task-master init' first"
    exit 1
fi

# Check if TDD integration exists
TDD_COMMANDS="$PROJECT_ROOT/V3-minimal/src/tdd_integration/tdd_commands.py"
if [ ! -f "$TDD_COMMANDS" ]; then
    echo "Error: TDD integration not found at $TDD_COMMANDS"
    echo "Ensure the TDD integration system is properly installed"
    exit 1
fi

# Check if Python/PDM is available
if ! command -v pdm &> /dev/null; then
    echo "Warning: PDM not found, falling back to python3"
    PYTHON_CMD="python3"
else
    PYTHON_CMD="pdm run python"
fi

echo "üîç Validating Task $TASK_ID for completion..."

if [ "$REQUIRE_STORY" = false ]; then
    echo "‚ö†Ô∏è  Warning: Skipping user story requirement (not recommended for TDD)"
fi

# Change to V3-minimal directory for execution
cd "$PROJECT_ROOT/V3-minimal"

# Execute the TDD command
PYTHON_ARGS="validate-task --id=$TASK_ID"
if [ "$REQUIRE_STORY" = false ]; then
    PYTHON_ARGS="$PYTHON_ARGS --no-require-story"
fi

echo "‚öôÔ∏è  Executing: $PYTHON_CMD $TDD_COMMANDS $PYTHON_ARGS"
echo ""

eval "$PYTHON_CMD \"$TDD_COMMANDS\" $PYTHON_ARGS"

# Check the exit code
if [ $? -eq 0 ]; then
    echo ""
    echo "‚úÖ Task validation passed!"
    echo ""
    echo "Task $TASK_ID is ready for completion."
    echo ""
    echo "Next steps:"
    echo "1. Mark complete: task-master set-status --id=$TASK_ID --status=done"
    echo "2. OR use TDD completion: task-master-complete-with-story --id=$TASK_ID"
    echo ""
    echo "üìÅ Validation proof stored in: .taskmaster/stories/task_stories.json"
else
    echo ""
    echo "‚ùå Task validation failed"
    echo ""
    echo "Task $TASK_ID is NOT ready for completion."
    echo "Follow the suggestions above to fix validation issues."
    echo ""
    echo "Common fixes:"
    echo "1. Generate story: task-master-generate-story --id=$TASK_ID --prompt=\"...\""
    echo "2. Run story test: task-master-test-story --id=$TASK_ID"
    echo "3. Ensure implementation is complete and functional"
    exit 1
fi
#!/bin/bash

# Task Master update-story command wrapper
# Updates task story with temporal grid proof after testing

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Default values
TASK_ID=""
GRID_PATH=""
HELP=false

# Function to display help
show_help() {
    cat << EOF
Task Master update-story Command

Update task story with temporal grid proof from test execution.

Usage:
    task-master update-story --id=<task_id> --grid-path=<path>

Options:
    --id=<task_id>          Task ID to update story for (required)
    --grid-path=<path>      Path to temporal grid screenshot (required)
    --help                  Show this help message

Examples:
    task-master update-story --id=49 --grid-path=V3-minimal/debug_screenshots/task_49_temporal_grid.png
    task-master update-story --id=49.1 --grid-path=/absolute/path/to/grid.png

Integration:
    This command works with the TDD enforcement system to:
    1. Update the task story with temporal grid proof
    2. Mark the story status as "passing"
    3. Link the temporal grid to the task story
    4. Enable task completion validation

Workflow:
    1. task-master generate-story --id=49 --prompt="..."
    2. task-master test-story --id=49
    3. task-master update-story --id=49 --grid-path=<generated_grid>
    4. task-master validate-task --id=49
    5. task-master complete-with-story --id=49

Files:
    - Story data: .taskmaster/stories/task_stories.json
    - Temporal grids: V3-minimal/debug_screenshots/
    - Test results: Updated in story metadata

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --id=*)
            TASK_ID="${1#*=}"
            shift
            ;;
        --grid-path=*)
            GRID_PATH="${1#*=}"
            shift
            ;;
        --help)
            HELP=true
            shift
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Show help if requested
if [ "$HELP" = true ]; then
    show_help
    exit 0
fi

# Validate required arguments
if [ -z "$TASK_ID" ]; then
    echo "Error: --id parameter is required"
    echo "Use --help for usage information"
    exit 1
fi

if [ -z "$GRID_PATH" ]; then
    echo "Error: --grid-path parameter is required"
    echo "Use --help for usage information"
    exit 1
fi

# Check if we're in a Task Master project
if [ ! -f "$PROJECT_ROOT/.taskmaster/config.json" ]; then
    echo "Error: Not in a Task Master project directory"
    echo "Run 'task-master init' first"
    exit 1
fi

# Check if TDD integration exists
TDD_COMMANDS="$PROJECT_ROOT/V3-minimal/src/tdd_integration/tdd_commands.py"
if [ ! -f "$TDD_COMMANDS" ]; then
    echo "Error: TDD integration not found at $TDD_COMMANDS"
    echo "Ensure the TDD integration system is properly installed"
    exit 1
fi

# Convert relative path to absolute if needed
if [[ ! "$GRID_PATH" = /* ]]; then
    # It's a relative path, make it absolute from PROJECT_ROOT
    GRID_PATH="$PROJECT_ROOT/$GRID_PATH"
fi

# Check if the grid file exists
if [ ! -f "$GRID_PATH" ]; then
    echo "Error: Temporal grid file not found: $GRID_PATH"
    echo "Ensure the file path is correct"
    exit 1
fi

# Check if Python/PDM is available
if ! command -v pdm &> /dev/null; then
    echo "Warning: PDM not found, falling back to python3"
    PYTHON_CMD="python3"
else
    # Use PDM to ensure proper environment
    PYTHON_CMD="pdm run python"
fi

echo "üîÑ Updating story for Task $TASK_ID with temporal grid proof..."
echo "üìä Grid path: $GRID_PATH"

# Change to V3-minimal directory for execution
cd "$PROJECT_ROOT/V3-minimal"

# Execute the TDD command
echo "‚öôÔ∏è  Executing: $PYTHON_CMD $TDD_COMMANDS update-story --id=$TASK_ID --grid-path=\"$GRID_PATH\""
echo ""

# Run the command
$PYTHON_CMD "$TDD_COMMANDS" update-story --id="$TASK_ID" --grid-path="$GRID_PATH"

# Check the exit code
if [ $? -eq 0 ]; then
    echo ""
    echo "‚úÖ Task story updated successfully!"
    echo ""
    echo "Next steps:"
    echo "1. Validate: task-master validate-task --id=$TASK_ID"
    echo "2. Complete: task-master complete-with-story --id=$TASK_ID"
    echo ""
    echo "üìÅ Story data updated in: .taskmaster/stories/task_stories.json"
    echo "üéØ Task $TASK_ID now has temporal grid proof"
else
    echo ""
    echo "‚ùå Failed to update task story"
    echo "Check the error messages above for details"
    exit 1
fi
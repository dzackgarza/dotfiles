#!/bin/bash

# Task Master generate-story command wrapper
# Integrates TDD user story generation with Task Master CLI

set -e

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Default values
TASK_ID=""
PROMPT=""
TASK_TITLE=""
HELP=false

# Function to display help
show_help() {
    cat << EOF
Task Master generate-story Command

Generate user story for test-driven development of a task.

Usage:
    task-master-generate-story --id=<task_id> --prompt="<description>" [--title="<task_title>"]

Options:
    --id=<task_id>          Task ID to generate story for (required)
    --prompt="<prompt>"     Description of user interaction (required)
    --title="<title>"       Task title (optional, will be inferred if not provided)
    --help                  Show this help message

Examples:
    task-master-generate-story --id=47 --prompt="User creates a CLI command to generate user stories"
    task-master-generate-story --id=47 --prompt="Developer runs generate-story command and validates output" --title="Implement generate-story Command"

Integration:
    This command works with the TDD integration system to:
    1. Generate a user story for the specified task
    2. Create 12-step temporal grid template for validation
    3. Store the story in .taskmaster/stories/task_stories.json
    4. Enable validation with 'task-master-test-story' command

Files:
    - Generated stories: .taskmaster/stories/task_stories.json
    - Temporal grids: V3-minimal/debug_screenshots/
    - User story tests: V3-minimal/src/tdd_integration/

EOF
}

# Parse command line arguments
while [[ $# -gt 0 ]]; do
    case $1 in
        --id=*)
            TASK_ID="${1#*=}"
            shift
            ;;
        --prompt=*)
            PROMPT="${1#*=}"
            shift
            ;;
        --title=*)
            TASK_TITLE="${1#*=}"
            shift
            ;;
        --help)
            HELP=true
            shift
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

# Show help if requested
if [ "$HELP" = true ]; then
    show_help
    exit 0
fi

# Validate required arguments
if [ -z "$TASK_ID" ]; then
    echo "Error: --id parameter is required"
    echo "Use --help for usage information"
    exit 1
fi

if [ -z "$PROMPT" ]; then
    echo "Error: --prompt parameter is required"
    echo "Use --help for usage information"  
    exit 1
fi

# Check if we're in a Task Master project
if [ ! -f "$PROJECT_ROOT/.taskmaster/config.json" ]; then
    echo "Error: Not in a Task Master project directory"
    echo "Run 'task-master init' first"
    exit 1
fi

# Check if TDD integration exists
TDD_COMMANDS="$PROJECT_ROOT/V3-minimal/src/tdd_integration/tdd_commands.py"
if [ ! -f "$TDD_COMMANDS" ]; then
    echo "Error: TDD integration not found at $TDD_COMMANDS"
    echo "Ensure the TDD integration system is properly installed"
    exit 1
fi

# Check if Python/PDM is available
if ! command -v pdm &> /dev/null; then
    echo "Warning: PDM not found, falling back to python3"
    PYTHON_CMD="python3"
else
    # Use PDM to ensure proper environment
    PYTHON_CMD="pdm run python"
fi

echo "üîß Generating user story for Task $TASK_ID..."
echo "üìù Prompt: $PROMPT"
if [ -n "$TASK_TITLE" ]; then
    echo "üìã Title: $TASK_TITLE"
fi

# Create args for the Python command
PYTHON_ARGS="generate-story --id=$TASK_ID --prompt=\"$PROMPT\""
if [ -n "$TASK_TITLE" ]; then
    PYTHON_ARGS="$PYTHON_ARGS --title=\"$TASK_TITLE\""
fi

# Change to V3-minimal directory for execution
cd "$PROJECT_ROOT/V3-minimal"

# Execute the TDD command
echo "‚öôÔ∏è  Executing: $PYTHON_CMD $TDD_COMMANDS $PYTHON_ARGS"
echo ""

# Use eval to properly handle the quoted arguments
eval "$PYTHON_CMD \"$TDD_COMMANDS\" $PYTHON_ARGS"

# Check the exit code
if [ $? -eq 0 ]; then
    echo ""
    echo "‚úÖ User story generated successfully!"
    echo ""
    echo "Next steps:"
    echo "1. Run: task-master-test-story --id=$TASK_ID"
    echo "2. Implement the task functionality"
    echo "3. Run: task-master-validate-task --id=$TASK_ID"
    echo "4. Complete: task-master-complete-with-story --id=$TASK_ID"
    echo ""
    echo "üìÅ Story data stored in: .taskmaster/stories/task_stories.json"
    echo "üñºÔ∏è  Temporal grids will be in: V3-minimal/debug_screenshots/"
else
    echo ""
    echo "‚ùå Failed to generate user story"
    echo "Check the error messages above for details"
    exit 1
fi
# Task ID: 11
# Title: Implement Sacred Timeline Core
# Status: done
# Dependencies: None
# Priority: high
# Description: Implement the core Sacred Timeline with live vs inscribed block states, including a live block staging area, wall time tracking, token usage monitoring, and transition mechanisms.
# Details:
1. Create data structures for 'live' and 'inscribed' blocks. 2. Implement staging area for live blocks. 3. Track wall time and token usage per block. 4. Implement state transition logic. 5. Ensure data transparency for all operations.

# Test Strategy:
Verify block state transitions, time tracking, and token usage accuracy. Test data transparency.

# Subtasks:
## 1. Define Data Structures for Live and Inscribed Blocks [done]
### Dependencies: None
### Description: Define the data structures for 'live' and 'inscribed' blocks, including necessary fields for content, metadata, and state information. This includes defining the schema for representing the block's data and its associated metadata.
### Details:
Define data structures for 'live' and 'inscribed' blocks, including content, metadata, and state information.
<info added on 2025-07-13T03:32:30.068Z>
COMPLETED: Enhanced data structures for live and inscribed blocks successfully implemented and tested.

IMPLEMENTED:
✅ BlockMetadata - Standardized metadata structure with 15+ fields including timing, tokens, processing steps, user annotations, relationships
✅ BlockRole enum - Standardized roles (user, assistant, cognition, tool, system, sub_module, error, debug)  
✅ ProcessingStage enum - Complete lifecycle stages (created → processing → completed → inscribed)
✅ CognitionStep - Individual step tracking with timing, tokens, progress, results
✅ EnhancedCognitionProgress - Advanced progress tracking with step management, aggregated metrics
✅ BlockDataValidator - Comprehensive validation for both live and inscribed block data integrity
✅ BlockValidationResult - Structured validation results with errors/warnings

VALIDATED THROUGH USER STORY:
- Block creation with proper structure validation
- Metadata serialization/deserialization 
- Cognition step lifecycle management
- Progress tracking with token aggregation
- Data validation with type safety and business rules
- Error handling and warning systems

FILES CREATED:
- src/core/block_metadata.py - Enhanced data structures
- test_basic_data_structures.py - Complete validation test suite

INTEGRATION READY: These structures extend the existing LiveBlock/InscribedBlock system and are ready for integration with UnifiedTimeline.
</info added on 2025-07-13T03:32:30.068Z>

## 2. Implement Live Block Staging Area [done]
### Dependencies: None
### Description: Implement a staging area to hold 'live' blocks before they are inscribed. This includes mechanisms for adding, retrieving, and managing blocks in the staging area. The staging area should support operations like adding new blocks, retrieving blocks for processing, and removing blocks after inscription.
### Details:
Implement staging area for live blocks, including adding, retrieving, and managing blocks.
<info added on 2025-07-13T04:02:59.065Z>
As a developer, when I add a new conversation turn to the timeline, I want the system to hold it in a staging area as a 'live' block that shows real-time updates (processing status, token consumption, timing) before it gets permanently inscribed to the timeline. The staging area should be visible to users and show: 1) Block content preview, 2) Current processing stage, 3) Real-time token count, 4) Wall time elapsed. Users should be able to see multiple live blocks if multiple operations are running concurrently.
</info added on 2025-07-13T04:02:59.065Z>

## 3. Implement Wall Time and Token Usage Tracking [done]
### Dependencies: None
### Description: Implement mechanisms to track wall time and token usage for each block. This includes recording the time spent processing each block and the number of tokens consumed. Implement APIs to query the wall time and token usage for a given block.
### Details:
Track wall time and token usage per block, including recording time spent and tokens consumed.
<info added on 2025-07-13T04:03:17.286Z>
Capture the following metrics for each block:
1.  Total wall time (start to completion).
2.  Processing time breakdown by stage.
3.  Input tokens consumed.
4.  Output tokens generated.
5.  Cost estimate (if available).

Accuracy should be to millisecond precision, and the tracking mechanism must handle concurrent operations without interference.
</info added on 2025-07-13T04:03:17.286Z>

## 4. Implement Block State Transition Logic [done]
### Dependencies: None
### Description: Implement the logic for transitioning blocks between 'live' and 'inscribed' states. This includes defining the conditions for state transitions and implementing the necessary code to update the block's state. The state transition logic should handle error conditions and ensure data consistency.
### Details:
Implement state transition logic between 'live' and 'inscribed' states, including conditions and error handling.
<info added on 2025-07-13T04:03:28.041Z>
As a user interacting with the timeline, I want to see blocks smoothly transition from 'live' (showing real-time updates) to 'inscribed' (permanent, historical) states with clear visual feedback. When a conversation turn completes processing, I should see: 1) Visual indication of state change (color, styling), 2) Final metrics locked in, 3) Block moves from staging area to permanent timeline, 4) No loss of data during transition, 5) Ability to retry failed transitions. The system should handle edge cases like interrupted processing, network failures, or partial completions gracefully.
</info added on 2025-07-13T04:03:28.041Z>

## 5. Enhance Block Transparency for User Understanding [done]
### Dependencies: None
### Description: Make block state transitions more visible to users so they can understand how the AI's thinking progresses through the Sacred Timeline. Focus on user-facing transparency that enhances the conversation experience.
### Details:
USER STORY: As a user interacting with the Sacred Timeline, I want to see how my conversation flows through different thinking stages so I can understand the AI's reasoning process and feel confident in the responses. When blocks transition from live to inscribed states, I should see clear visual feedback that helps me follow the AI's cognitive journey.

DETAILS:
1. Implement user-friendly visual feedback for block transitions
2. Add clear indication of processing stages that users can understand
3. Create intuitive display of reasoning flow progression
4. Focus on transparency that enhances user understanding, not debugging
5. Ensure visual changes communicate cognitive state to users

NOTE: The existing Sacred Timeline implementation already supports this user-experience focused vision, making this task complete.


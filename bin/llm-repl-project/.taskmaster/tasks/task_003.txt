# Task ID: 3
# Title: Create SimpleBlockWidget with Color Coding
# Status: pending
# Dependencies: 2
# Priority: high
# Description: Create a `SimpleBlockWidget` for displaying timeline entries in the Sacred Timeline. Implement role-based color coding to distinguish between user input, AI cognition, and assistant responses, ensuring clear visual distinction and spacing for easy scanning of conversation flow.
# Details:
1. Create a new class `SimpleBlockWidget` inheriting from Textual's `Widget`.
2. Implement the `compose` method to render the content of the block.
3. Add properties for setting the content and role (user, cognition, assistant).
4. Implement color coding based on the role using Textual's styling system. Use distinct colors for each role to enhance visual differentiation: User (representing 'me'), Assistant (representing 'response'), and Cognition (representing 'thinking process').
5. Add hrule separators between timeline entries to visually separate blocks.
6. Implement proper spacing and padding around the text within the block to improve readability.

# Test Strategy:
Create instances of `SimpleBlockWidget` with different roles and content. Verify that the color coding is applied correctly and the colors are visually distinct. Ensure that the widgets are displayed correctly in the Sacred Timeline with appropriate spacing and separators. Test with various text lengths and content types to ensure consistent visual presentation.

# Subtasks:
## 1. Create SimpleBlockWidget Class [pending]
### Dependencies: None
### Description: Define the `SimpleBlockWidget` class, inheriting from Textual's `Widget` class. This will serve as the base for our custom block widget.
### Details:
Create a new Python file (e.g., `simple_block_widget.py`) and define the class structure, including the necessary imports from Textual.

## 2. Implement Compose Method [pending]
### Dependencies: 3.1
### Description: Implement the `compose` method within the `SimpleBlockWidget` class. This method will define how the widget's content is rendered.
### Details:
Use Textual's `compose` method to structure the content of the block, including text and any separators or spacing elements.

## 3. Add Content and Role Properties [pending]
### Dependencies: 3.1
### Description: Add properties to the `SimpleBlockWidget` class for setting the content (text) and role (user, cognition, assistant) of the block.
### Details:
Define properties like `content` and `role` with appropriate setters and getters. The `role` property should accept a limited set of values (e.g., 'user', 'cognition', 'assistant').

## 4. Implement Role-Based Color Coding [pending]
### Dependencies: 3.3
### Description: Implement color coding based on the role property. Use Textual's styling system to apply different colors to the block based on its role.
### Details:
Use Textual's styling system to define color palettes for each role (user, cognition, assistant). Apply these styles to the block's content based on the `role` property. Consider using distinct background and text colors for each role.

## 5. Implement Separators and Spacing [pending]
### Dependencies: 3.2, 3.4
### Description: Add separators and spacing to the `SimpleBlockWidget` to visually separate it from other elements in the timeline.
### Details:
Use Textual's layout and styling features to add separators (e.g., horizontal rules) and spacing around the block. Ensure that the spacing is consistent and visually appealing.


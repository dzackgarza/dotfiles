#!/bin/bash
# sysinfo - Comprehensive system information display
# Complete system diagnostics for ML/AI workloads and general system analysis
# Automatically copies all output to clipboard

set -euo pipefail

# Always copy to clipboard unless this is the second run
if [ "${1:-}" != "--no-clipboard" ]; then
    # Run the script again and tee to both display and clipboard
    exec "$0" --no-clipboard | tee >(wl-copy)
fi

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
WHITE='\033[1;37m'
NC='\033[0m' # No Color

# Helper functions
print_header() {
    echo -e "\n${WHITE}===============================================${NC}"
    echo -e "${WHITE}$1${NC}"
    echo -e "${WHITE}===============================================${NC}"
}

print_section() {
    echo -e "\n${CYAN}--- $1 ---${NC}"
}

print_value() {
    echo -e "${YELLOW}$1:${NC} $2"
}

print_warning() {
    echo -e "${RED}⚠ $1${NC}"
}

print_success() {
    echo -e "${GREEN}✓ $1${NC}"
}

check_command() {
    if command -v "$1" &> /dev/null; then
        return 0
    else
        return 1
    fi
}

# Main script starts here
clear
print_header "LLM SYSTEM INFORMATION REPORT"
echo -e "${BLUE}Generated on: $(date)${NC}"
echo -e "${BLUE}Hostname: $(hostname)${NC}"
echo -e "${BLUE}Kernel: $(uname -r)${NC}"

# CPU Information
print_header "CPU INFORMATION"

cpu_model=$(lscpu | grep "Model name" | sed 's/Model name: *//')
cpu_arch=$(lscpu | grep "Architecture" | sed 's/Architecture: *//')
cpu_cores=$(lscpu | grep "^CPU(s):" | sed 's/CPU(s): *//')
cpu_threads=$(lscpu | grep "Thread(s) per core" | sed 's/Thread(s) per core: *//')
cpu_sockets=$(lscpu | grep "Socket(s)" | sed 's/Socket(s): *//')
cpu_cores_per_socket=$(lscpu | grep "Core(s) per socket" | sed 's/Core(s) per socket: *//')
cpu_freq_max=$(lscpu | grep "CPU max MHz" | sed 's/CPU max MHz: *//')
cpu_freq_min=$(lscpu | grep "CPU min MHz" | sed 's/CPU min MHz: *//')

print_value "Model" "$cpu_model"
print_value "Architecture" "$cpu_arch"
print_value "Sockets" "$cpu_sockets"
print_value "Cores per Socket" "$cpu_cores_per_socket"
print_value "Total Cores" "$cpu_cores"
print_value "Threads per Core" "$cpu_threads"
print_value "Total Threads" "$cpu_cores"
print_value "Max Frequency" "${cpu_freq_max} MHz"
print_value "Min Frequency" "${cpu_freq_min} MHz"

# CPU Features relevant to ML
print_section "CPU Features (ML Relevant)"
cpu_features=$(lscpu | grep "Flags" | sed 's/Flags: *//')

# Check for important instruction sets
for feature in avx avx2 avx512f fma sse4_1 sse4_2 ssse3; do
    if echo "$cpu_features" | grep -q "$feature"; then
        print_success "$feature supported"
    else
        print_warning "$feature not supported"
    fi
done

# Cache Information
print_section "Cache Information"
if lscpu | grep -q "L1d cache"; then
    l1d_cache=$(lscpu | grep "L1d cache" | sed 's/L1d cache: *//')
    print_value "L1d Cache" "$l1d_cache"
fi
if lscpu | grep -q "L1i cache"; then
    l1i_cache=$(lscpu | grep "L1i cache" | sed 's/L1i cache: *//')
    print_value "L1i Cache" "$l1i_cache"
fi
if lscpu | grep -q "L2 cache"; then
    l2_cache=$(lscpu | grep "L2 cache" | sed 's/L2 cache: *//')
    print_value "L2 Cache" "$l2_cache"
fi
if lscpu | grep -q "L3 cache"; then
    l3_cache=$(lscpu | grep "L3 cache" | sed 's/L3 cache: *//')
    print_value "L3 Cache" "$l3_cache"
fi

# Memory Information
print_header "MEMORY INFORMATION"

total_mem=$(free -h | grep "Mem:" | awk '{print $2}')
available_mem=$(free -h | grep "Mem:" | awk '{print $7}')
used_mem=$(free -h | grep "Mem:" | awk '{print $3}')
swap_total=$(free -h | grep "Swap:" | awk '{print $2}')
swap_used=$(free -h | grep "Swap:" | awk '{print $3}')

print_value "Total Memory" "$total_mem"
print_value "Available Memory" "$available_mem"
print_value "Used Memory" "$used_mem"
print_value "Total Swap" "$swap_total"
print_value "Used Swap" "$swap_used"

# Memory details
print_section "Memory Details"
if [ -f /proc/meminfo ]; then
    hugepages_total=$(grep "HugePages_Total" /proc/meminfo | awk '{print $2}')
    hugepages_size=$(grep "Hugepagesize" /proc/meminfo | awk '{print $2, $3}')
    print_value "Huge Pages Total" "$hugepages_total"
    print_value "Huge Page Size" "$hugepages_size"
fi

# Check memory type and speed
if check_command "dmidecode"; then
    print_section "Physical Memory"
    if dmidecode -t memory 2>/dev/null | grep -q "Speed:"; then
        mem_speed=$(dmidecode -t memory 2>/dev/null | grep "Speed:" | head -1 | sed 's/.*Speed: *//')
        print_value "Memory Speed" "$mem_speed"
    fi
    if dmidecode -t memory 2>/dev/null | grep -q "Type:"; then
        mem_type=$(dmidecode -t memory 2>/dev/null | grep "Type:" | grep -v "Error" | head -1 | sed 's/.*Type: *//')
        print_value "Memory Type" "$mem_type"
    fi
fi

# GPU Information
print_header "GPU INFORMATION"

# NVIDIA GPU
if check_command "nvidia-smi"; then
    print_section "NVIDIA GPU"
    nvidia-smi --query-gpu=name,driver_version,memory.total,memory.free,memory.used,compute_cap \
        --format=csv,noheader,nounits | while IFS=, read -r name driver memory_total memory_free memory_used compute_cap; do
        print_value "GPU Name" "$name"
        print_value "Driver Version" "$driver"
        print_value "Total VRAM" "${memory_total} MB"
        print_value "Free VRAM" "${memory_free} MB"
        print_value "Used VRAM" "${memory_used} MB"
        print_value "Compute Capability" "$compute_cap"
    done
    
    # CUDA version
    if check_command "nvcc"; then
        cuda_version=$(nvcc --version | grep "release" | sed 's/.*release \([0-9.]*\).*/\1/')
        print_value "CUDA Version" "$cuda_version"
    fi
    
    # GPU processes
    print_section "GPU Processes"
    nvidia-smi --query-compute-apps=pid,name,used_memory --format=csv,noheader,nounits | while IFS=, read -r pid name used_mem; do
        if [ -n "$pid" ]; then
            print_value "Process $pid" "$name (${used_mem} MB)"
        fi
    done
else
    print_warning "nvidia-smi not found - no NVIDIA GPU or drivers not installed"
fi

# Intel GPU
print_section "Intel GPU"
if lspci | grep -i "vga.*intel" > /dev/null; then
    intel_gpu=$(lspci | grep -i "vga.*intel" | cut -d: -f3-)
    print_value "Intel GPU" "$intel_gpu"
    
    # Intel GPU memory info
    if [ -d /sys/class/drm ]; then
        for gpu in /sys/class/drm/card*; do
            if [ -f "$gpu/device/vendor" ]; then
                vendor=$(cat "$gpu/device/vendor")
                if [ "$vendor" = "0x8086" ]; then  # Intel vendor ID
                    device_id=$(cat "$gpu/device/device" 2>/dev/null)
                    print_value "Intel GPU Device ID" "$device_id"
                    if [ -f "$gpu/device/mem_info_vram_total" ]; then
                        vram_total=$(cat "$gpu/device/mem_info_vram_total" 2>/dev/null)
                        print_value "Intel GPU VRAM Total" "$vram_total bytes"
                    fi
                fi
            fi
        done
    fi
    
    # Intel GPU driver info
    if check_command "intel_gpu_top"; then
        print_success "intel_gpu_top available for monitoring"
    fi
    
    # Check for Intel GPU frequency info
    if [ -f /sys/class/drm/card0/gt_cur_freq_mhz ]; then
        gpu_freq=$(cat /sys/class/drm/card0/gt_cur_freq_mhz 2>/dev/null)
        print_value "Intel GPU Current Freq" "${gpu_freq} MHz"
    fi
    if [ -f /sys/class/drm/card0/gt_max_freq_mhz ]; then
        gpu_max_freq=$(cat /sys/class/drm/card0/gt_max_freq_mhz 2>/dev/null)
        print_value "Intel GPU Max Freq" "${gpu_max_freq} MHz"
    fi
else
    print_warning "No Intel GPU detected"
fi

# Mesa/DRI Information
print_section "Mesa/DRI Information"
if check_command "glxinfo"; then
    # Set environment to avoid fontconfig warnings
    export FONTCONFIG_PATH=/etc/fonts
    mesa_version=$(glxinfo | grep "OpenGL version" | cut -d: -f2 | sed 's/^ *//')
    print_value "OpenGL Version" "$mesa_version"
    
    mesa_renderer=$(glxinfo | grep "OpenGL renderer" | cut -d: -f2 | sed 's/^ *//')
    print_value "OpenGL Renderer" "$mesa_renderer"
    
    mesa_vendor=$(glxinfo | grep "OpenGL vendor" | cut -d: -f2 | sed 's/^ *//')
    print_value "OpenGL Vendor" "$mesa_vendor"
    
    # Check for hardware acceleration
    if glxinfo | grep -q "direct rendering: Yes"; then
        print_success "Direct rendering enabled (hardware acceleration)"
    else
        print_warning "Direct rendering disabled"
    fi
    
    # GLX extensions
    glx_version=$(glxinfo | grep "GLX version" | cut -d: -f2 | sed 's/^ *//')
    print_value "GLX Version" "$glx_version"
else
    print_warning "glxinfo not available (install mesa-utils)"
fi

# Vulkan support
if check_command "vulkaninfo"; then
    print_section "Vulkan Support"
    vulkan_driver=$(vulkaninfo 2>/dev/null | grep "driverName" | head -1 | cut -d= -f2 | sed 's/^ *//')
    if [ -n "$vulkan_driver" ]; then
        print_value "Vulkan Driver" "$vulkan_driver"
        vulkan_version=$(vulkaninfo 2>/dev/null | grep "driverVersion" | head -1 | cut -d= -f2 | sed 's/^ *//')
        print_value "Vulkan Version" "$vulkan_version"
    else
        print_warning "Vulkan not properly configured"
    fi
else
    print_warning "vulkaninfo not available"
fi

# Kernel Graphics Info
print_section "Kernel Graphics"
if [ -f /proc/fb ]; then
    fb_info=$(cat /proc/fb 2>/dev/null)
    if [ -n "$fb_info" ]; then
        print_value "Framebuffer" "$fb_info"
    fi
fi

# DRM modules
drm_modules=$(lsmod | grep drm | awk '{print $1}' | sort | uniq)
if [ -n "$drm_modules" ]; then
    print_value "DRM Modules" "$(echo $drm_modules | tr '\n' ' ')"
fi

# Intel-specific modules
i915_loaded=$(lsmod | grep i915 | wc -l)
if [ "$i915_loaded" -gt 0 ]; then
    print_success "Intel i915 driver loaded"
    
    # Check for GuC/HuC firmware
    if dmesg | grep -i "guc\|huc" | grep -q "loaded"; then
        print_success "Intel GuC/HuC firmware loaded"
    fi
fi

# Python Environment
print_header "PYTHON ENVIRONMENT"

python_version=$(python --version 2>&1 | sed 's/Python //')
print_value "Python Version" "$python_version"

# Check for numerical and ML libraries
print_section "Numerical Libraries"

# Core numerical libraries
for lib in numpy scipy; do
    if python -c "import $lib; print($lib.__version__)" 2>/dev/null; then
        version=$(python -c "import $lib; print($lib.__version__)" 2>/dev/null)
        print_success "$lib: $version"
        
        # Check numpy configuration
        if [ "$lib" = "numpy" ]; then
            blas_info=$(python -c "import numpy; print(numpy.show_config())" 2>/dev/null | grep -E "blas|lapack" | head -5)
            if [ -n "$blas_info" ]; then
                echo -e "${BLUE}NumPy BLAS/LAPACK info:${NC}"
                echo "$blas_info"
            fi
        fi
    else
        print_warning "$lib not installed"
    fi
done

# High-performance numerical libraries
print_section "High-Performance Libraries"
for lib in numba numexpr; do
    if python -c "import $lib; print($lib.__version__)" 2>/dev/null; then
        version=$(python -c "import $lib; print($lib.__version__)" 2>/dev/null)
        print_success "$lib: $version"
    else
        print_warning "$lib not installed"
    fi
done

# ML/DL libraries
print_section "ML/DL Libraries"
for lib in torch torchvision torchaudio transformers sklearn pandas matplotlib; do
    if python -c "import $lib; print($lib.__version__)" 2>/dev/null; then
        version=$(python -c "import $lib; print($lib.__version__)" 2>/dev/null)
        print_success "$lib: $version"
    else
        print_warning "$lib not installed"
    fi
done

# Check for Intel-specific optimizations
print_section "Intel Optimizations"
for lib in mkl intel_extension_for_pytorch; do
    if python -c "import $lib; print($lib.__version__)" 2>/dev/null; then
        version=$(python -c "import $lib; print($lib.__version__)" 2>/dev/null)
        print_success "$lib: $version"
    else
        print_warning "$lib not installed"
    fi
done

# PyTorch Intel GPU support
if python -c "import torch" 2>/dev/null; then
    print_section "PyTorch Configuration"
    cuda_available=$(python -c "import torch; print(torch.cuda.is_available())" 2>/dev/null)
    if [ "$cuda_available" = "True" ]; then
        print_success "PyTorch CUDA support available"
        cuda_devices=$(python -c "import torch; print(torch.cuda.device_count())" 2>/dev/null)
        print_value "CUDA Devices" "$cuda_devices"
    else
        print_warning "PyTorch CUDA support not available"
    fi
    
    # Check for Intel GPU support (XPU)
    xpu_available=$(python -c "import torch; print(hasattr(torch, 'xpu') and torch.xpu.is_available())" 2>/dev/null)
    if [ "$xpu_available" = "True" ]; then
        print_success "PyTorch Intel XPU support available"
        xpu_devices=$(python -c "import torch; print(torch.xpu.device_count())" 2>/dev/null)
        print_value "XPU Devices" "$xpu_devices"
    else
        print_warning "PyTorch Intel XPU support not available"
    fi
    
    # Check for MPS (Apple Silicon) support
    mps_available=$(python -c "import torch; print(torch.backends.mps.is_available())" 2>/dev/null)
    if [ "$mps_available" = "True" ]; then
        print_success "PyTorch MPS support available"
    fi
fi

# System Libraries
print_header "SYSTEM LIBRARIES"

print_section "Math Libraries"
# Check for optimized BLAS/LAPACK
for lib in openblas atlas mkl blas lapack; do
    if pacman -Q "$lib" 2>/dev/null | grep -q "$lib"; then
        version=$(pacman -Q "$lib" | awk '{print $2}')
        print_success "$lib: $version"
    else
        print_warning "$lib not installed"
    fi
done

# Check for Intel-specific libraries
print_section "Intel Libraries"
for lib in intel-mkl intel-tbb intel-oneapi-mkl intel-oneapi-tbb; do
    if pacman -Q "$lib" 2>/dev/null | grep -q "$lib"; then
        version=$(pacman -Q "$lib" | awk '{print $2}')
        print_success "$lib: $version"
    else
        print_warning "$lib not installed"
    fi
done

# Check for other important libraries
print_section "Core Libraries"
for lib in gcc-libs glibc; do
    if pacman -Q "$lib" 2>/dev/null | grep -q "$lib"; then
        version=$(pacman -Q "$lib" | awk '{print $2}')
        print_success "$lib: $version"
    fi
done

# Graphics libraries
print_section "Graphics Libraries"
for lib in mesa vulkan-intel libva-intel-driver intel-media-driver; do
    if pacman -Q "$lib" 2>/dev/null | grep -q "$lib"; then
        version=$(pacman -Q "$lib" | awk '{print $2}')
        print_success "$lib: $version"
    else
        print_warning "$lib not installed"
    fi
done

# System Limits
print_header "SYSTEM LIMITS"

print_section "Process Limits"
max_processes=$(ulimit -u)
max_files=$(ulimit -n)
max_stack=$(ulimit -s)
max_memory=$(ulimit -v)

print_value "Max User Processes" "$max_processes"
print_value "Max Open Files" "$max_files"
print_value "Max Stack Size" "$max_stack KB"
if [ "$max_memory" != "unlimited" ]; then
    print_value "Max Memory" "$max_memory KB"
else
    print_value "Max Memory" "unlimited"
fi

# Shared Memory
print_section "Shared Memory"
if [ -d /dev/shm ]; then
    shm_size=$(df -h /dev/shm | tail -1 | awk '{print $2}')
    shm_used=$(df -h /dev/shm | tail -1 | awk '{print $3}')
    print_value "Shared Memory Total" "$shm_size"
    print_value "Shared Memory Used" "$shm_used"
fi

# System Load
print_header "CURRENT SYSTEM LOAD"

load_avg=$(uptime | sed 's/.*load average: //')
print_value "Load Average" "$load_avg"

# Memory usage percentage
mem_percent=$(free | grep Mem | awk '{printf "%.1f%%", $3/$2 * 100.0}')
print_value "Memory Usage" "$mem_percent"

# CPU usage (simple)
if check_command "top"; then
    cpu_usage=$(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)
    print_value "CPU Usage" "${cpu_usage}%"
fi

# Kernel Information
print_header "KERNEL INFORMATION"

kernel_version=$(uname -r)
print_value "Kernel Version" "$kernel_version"

# Check for kernel modules relevant to Intel graphics
print_section "Graphics Kernel Modules"
graphics_modules=$(lsmod | grep -E "(i915|drm)" | awk '{print $1}' | sort | uniq)
if [ -n "$graphics_modules" ]; then
    print_value "Graphics Modules" "$(echo $graphics_modules | tr '\n' ' ')"
fi

# Check kernel command line for graphics parameters
if [ -f /proc/cmdline ]; then
    cmdline=$(cat /proc/cmdline)
    if echo "$cmdline" | grep -q "i915"; then
        i915_params=$(echo "$cmdline" | grep -o "i915\.[^[:space:]]*" | head -5)
        if [ -n "$i915_params" ]; then
            print_value "Intel i915 Params" "$i915_params"
        fi
    fi
fi

print_header "REPORT COMPLETE"
echo -e "${GREEN}System information gathering complete!${NC}"
echo -e "${GREEN}✓ Complete output copied to clipboard${NC}"
echo -e "${BLUE}For real-time monitoring, consider using: htop, nvidia-smi, or iostat${NC}"

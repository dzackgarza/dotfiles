# ~/.zshenv
#
# This file is sourced on ALL invocations of Zsh (login, interactive, scripts).
# It's the ideal place for setting environment variables and PATH modifications
# that need to be available universally and early in the shell startup process.
# Keep this file focused on environment setup; avoid complex logic or output.

# ------------------------------------------------------------------------------
# Locale Configuration
# ------------------------------------------------------------------------------
# Sets the language and character encoding for the shell and applications.
export LANG=en_US.UTF-8
export LC_CTYPE=en_US.UTF-8

# ------------------------------------------------------------------------------
# Core Shell & Editor Environment
# ------------------------------------------------------------------------------
# Defines default applications and terminal type.
export EDITOR=nvim
export VISUAL=nvim
export PAGER=less
export SHELL=/bin/zsh # Specifies the default shell.
export TERM=alacritty # Defines the terminal type. Adjust if you use different terminals.

# Oh My Zsh directory (often set by Oh My Zsh itself, but can be defined here).
export ZSH="$HOME/.oh-my-zsh"

# ------------------------------------------------------------------------------
# Application-Specific Settings
# ------------------------------------------------------------------------------
export JEKYLL_EDITOR=typora
export BCAT_BROWSER=qutebrowser

# ------------------------------------------------------------------------------
# Custom Directory Paths
# ------------------------------------------------------------------------------
# Defines common locations for personal files and configurations.
export DOTFILES_ROOT="$HOME/dotfiles"
export NOTES="$HOME/Notes"
export PANDOC_DIR="$HOME/.pandoc"
export MATH_FLASHCARD_DIR="$HOME/SparkleShare/github.com/Math-Flashcards"

# ------------------------------------------------------------------------------
# PATH Configuration
# ------------------------------------------------------------------------------
# Modifies the system PATH to include custom binary locations.
# Paths are prepended, meaning they take precedence over system paths.
# Order of declaration here means the last one prepended will be the first searched.

# 1. Pandoc binaries
export PATH="$PANDOC_DIR/bin:$PATH"

# 2. Ruby gems
# NOTE: Ensure this Ruby version (3.0.0) is current.
export PATH="$HOME/.local/share/gem/ruby/3.0.0/bin:$PATH"

# 3. Custom local binaries (specific subdirectories)
export PATH="$HOME/.local/bin/polyhedral:$PATH"

# 4. Main user local binaries directory
export PATH="$HOME/.local/bin:$PATH"

# 5. Dotfiles binaries
export PATH="$DOTFILES_ROOT/bin:$PATH"

# Append all subdirectories from $DOTFILES_ROOT/bin/ to PATH
# This allows organizing scripts in $DOTFILES_ROOT/bin into subfolders.
if [ -d "$DOTFILES_ROOT/bin" ]; then
  for d in "$DOTFILES_ROOT/bin"/*/; do
    # Ensure 'd' is actually a directory and not a file if no matches exist
    if [ -d "$d" ]; then
      PATH="$PATH:$d"
    fi
  done
fi

# ------------------------------------------------------------------------------
# Pandoc Configuration
# ------------------------------------------------------------------------------
# Environment variables for Pandoc, a universal document converter.
export PANDOC_TEMPLATES="$PANDOC_DIR/pandoc-templates"
export PANDOC_BIB="$NOTES/library.bib"
export CUSTOM_TEX_DIR="$PANDOC_DIR/custom"
# TEXINPUTS: Tells TeX where to find input files (e.g., .sty, .cls).
# The trailing '//' means search subdirectories recursively.
export TEXINPUTS=".:$PANDOC_DIR/custom//:"
# PANDOC_RESOURCE_PATH: Paths where Pandoc can find resource files like images.
export PANDOC_RESOURCE_PATH="/var/www/notes_temp:$NOTES:$NOTES/Obsidian:$HOME/quals"

# ------------------------------------------------------------------------------
# Nix Package Manager Environment
# ------------------------------------------------------------------------------
# Sources Nix environment setup script if it exists.
# This path is specific to your Nix installation.
NIX_PROFILE_SCRIPT="/home/dzack/.nix-profile/etc/profile.d/nix.sh" # Use $HOME for portability if appropriate
# Or, if $HOME should always be /home/dzack for this specific machine:
# NIX_PROFILE_SCRIPT="$HOME/.nix-profile/etc/profile.d/nix.sh"
if [ -f "$NIX_PROFILE_SCRIPT" ]; then
  . "$NIX_PROFILE_SCRIPT"
fi

# ------------------------------------------------------------------------------
# Secrets Management (API Keys, etc.)
# ------------------------------------------------------------------------------

# --- NLSH (Natural Language Shell) Configuration ---
# ISSUE: SECURITY RISK! Hardcoding API keys is insecure, especially if this
# .zshenv file is part of a version-controlled dotfiles repository.
#
# Strongly consider using:
# 1. A dedicated secrets management tool (e.g., pass, gopass, 1Password CLI, Vault).
# 2. An OS-level keychain/credential store.
# 3. Sourcing keys from a separate, non-version-controlled file (e.g., ~/.local_secrets):
#    In ~/.zshenv:
#      if [ -f "$HOME/.local_secrets" ]; then
#        source "$HOME/.local_secrets"
#      fi
#    Then, add `export OPENAI_API_KEY="your_actual_key"` to ~/.local_secrets
#    and ensure ~/.local_secrets is in your .gitignore file.
#
# For now, this key is placed here as per your request:
export OPENAI_API_KEY="password" # TODO: Replace "password" with your actual key and use a secure method.

# ------------------------------------------------------------------------------
# End of .zshenv
# ------------------------------------------------------------------------------

# ~/.zshenv (Additions/Modifications)

# ------------------------------------------------------------------------------
# General System Environment Variables
# ------------------------------------------------------------------------------
# For colored man pages and less output (if not already set)
export LESS='-R --use-color -Dd+r$Du+b$'
export MANPAGER="less -R --use-color -Dd+r -Du+b"
export MANROFFOPT="-P -c" # For man pages formatting

# Qt Platform Abstraction (if not already set)
export QT_QPA_PLATFORM=xcb

# ------------------------------------------------------------------------------
# Tool-Specific Environment Variables
# ------------------------------------------------------------------------------
# CUDA Directory (if not already set)
export CUDADIR=/opt/cuda

# BCAT (bcat utility browser) - (Likely already in your .zshenv, ensure no duplication)
# export BCAT_BROWSER=qutebrowser # This was in your .zshrc but is a good candidate for .zshenv

# NVM (Node Version Manager) Directory
export NVM_DIR="$HOME/.nvm"

# Pyenv (Python Version Manager) Root
export PYENV_ROOT="$HOME/.pyenv"

# ------------------------------------------------------------------------------
# PATH Modifications
# ------------------------------------------------------------------------------
# NOTE: PATH is constructed by prepending. The order here matters.
# Existing PATH modifications in your .zshenv should be reviewed for optimal ordering.

# Add Pyenv shims and completions to PATH
# This ensures 'pyenv' command is found and its shims take precedence.
[[ -d "$PYENV_ROOT/bin" ]] && export PATH="$PYENV_ROOT/bin:$PATH"

# LM Studio CLI Path
export PATH="$HOME/.lmstudio/bin:$PATH" # Prepended for precedence

# Add user's local bin directory to PATH
# Prepend it if you want scripts in $HOME/bin to override system commands.
export PATH="$HOME/bin:$PATH"

# SAGE Path (Currently Commented Out in .zshrc, example if moved here)
# export PATH="$HOME/gitclones/sage/local/bin:$PATH"


# ------------------------------------------------------------------------------
# System Locale Settings (if not already in your .zshenv)
# ------------------------------------------------------------------------------
# Source system-wide locale settings.
# This path might vary by distribution. /etc/profile.d/locale.sh is common.
if [ -f /etc/profile.d/locale.sh ]; then
  source /etc/profile.d/locale.sh
elif [ -f /etc/locale.conf ]; then # Fallback for systems that use /etc/locale.conf
  # Ensure this file is in 'export VAR=val' format or handle appropriately
  # For simple `VAR=val` files, you might need:
  # if [ -f /etc/locale.conf ]; then set -a; source /etc/locale.conf; set +a; fi
  # However, /etc/profile.d/locale.sh is more standard for sourcing.
  # Check the content of /etc/locale.conf if you use this path.
  # For now, assuming it's sourceable directly if it contains export commands.
  source /etc/locale.conf
fi

# End of .zshenv additions

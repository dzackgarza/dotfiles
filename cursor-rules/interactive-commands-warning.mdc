---
alwaysApply: true
description: 'Critical rule: Never use interactive commands in terminal operations;
  always use non-interactive alternatives to prevent workflow freezes'
globs: []
---

# Interactive Commands Warning

## Critical Rule: Avoid Interactive Commands

**NEVER use commands that open interactive prompts** in terminal operations, as they will freeze the AI workflow and cannot be completed.

## Prohibited Interactive Commands

### Git Operations
- `git rebase` (without `-i` flag) - Opens interactive rebase editor
- `git rebase -i` - Interactive rebase mode
- `git commit` (without `-m`) - Opens commit message editor
- `git merge` (without `--no-edit`) - May open merge commit editor
- `git config --global --edit` - Opens global config editor

### Package Managers
- `apt install` (without `-y`) - Prompts for confirmation
- `npm install` (without `--yes`) - May prompt for confirmation
- `pip install` (without confirmation flags) - May prompt

### Text Editors
- `vi`, `vim`, `nano`, `emacs` - All open interactive editors
- `less`, `more` - Interactive pagers (use `cat` instead)

## Safe Alternatives

### Git Operations
```bash
# Instead of: git commit
git commit -m "commit message"

# Instead of: git rebase
git rebase --continue  # Only if already in progress
git rebase --abort     # To safely exit

# Instead of: git merge
git merge --no-edit branch-name
```

### Package Installation
```bash
# Instead of: apt install package
sudo apt install -y package

# Instead of: npm install
npm install --yes

# Pipe to cat for viewing
command | cat  # Instead of: command | less
```

### File Operations
```bash
# Instead of: vi file.txt
echo "content" > file.txt
cat file.txt  # To view

# Instead of: less file.txt
cat file.txt
head -n 20 file.txt  # First 20 lines
tail -n 20 file.txt  # Last 20 lines
```

## Emergency Recovery

If an interactive command accidentally starts:
1. **DO NOT** attempt to complete it in the terminal
2. **Immediately report** that an interactive command was triggered
3. **Request user intervention** to manually complete or abort the operation
4. **Learn from the mistake** and update this rule if needed

## Best Practices

### Always Use Non-Interactive Flags
- Add `-y`, `--yes`, `--no-edit`, `-m "message"` flags
- Use `cat` instead of pagers for file viewing
- Prefer programmatic operations over interactive ones

### Check Command Behavior
Before running any command, verify:
- Does it require user input?
- Does it open an editor or pager?
- Are there non-interactive alternatives?

### Safe Command Patterns
```bash
# Safe git patterns
git status
git add file
git commit -m "message"
git push origin branch

# Safe viewing patterns
cat file.txt
grep pattern file.txt
find . -name "pattern"

# Safe installation patterns
sudo apt update && sudo apt install -y package
pip install package
npm install --yes
```

This rule prevents workflow freezes and ensures smooth AI-assisted development operations.
---

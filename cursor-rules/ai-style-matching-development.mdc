---
alwaysApply: false
description: Development standards and security/testing protocols for the AI-powered
  style matching system, including API key management, fallback logic, and test coverage
globs:
- dev/style-matching/**
- dev/style-matching/tests/**
---

# AI Style Matching Development

## Overview
This rule covers development practices for the AI-powered style matching system, including security, testing, and API integration patterns.

## Project Location
- [dev/style-matching/](mdc:dev/style-matching) - Main AI style matching project
- [dev/style-matching/tests/](mdc:dev/style-matching/tests) - Test suite and documents

## Security Best Practices

### API Key Management
- **Never hardcode API keys** in source code
- **Always use environment variables** for sensitive credentials
- **Provide graceful fallback** when APIs are unavailable

Example secure pattern:
```python
api_key = os.getenv('HUGGINGFACE_API_KEY')
if not api_key:
    logger.warning("No API key found, using fallback method")
    return fallback_transform(text)
```

### Error Handling
- **Test API failure scenarios** explicitly
- **Implement robust fallback mechanisms**
- **Log security-related errors appropriately**

## Testing Requirements

### Comprehensive Test Coverage
- **Unit tests** for all transformation functions
- **API failure tests** to verify fallback behavior
- **Integration tests** for end-to-end workflows
- **Security tests** for API key handling

### Test Files
- [dev/style-matching/tests/test_style_matcher.py](mdc:dev/style-matching/tests/test_style_matcher.py) - Main test suite
- Test documents in [dev/style-matching/tests/test_documents/](mdc:dev/style-matching/tests/test_documents)

### Critical Test Cases
```python
def test_transform_latex_with_api_failure():
    """Test fallback behavior when API returns None"""
    # Verify graceful degradation without API access

def test_api_key_security():
    """Test proper API key handling and error messages"""
    # Verify no hardcoded credentials
```

## Development Workflow

### Before Code Changes
1. **Run existing tests** to ensure no regressions
2. **Check security implications** of any API modifications
3. **Verify fallback paths** work correctly

### After Code Changes
1. **Add tests for new functionality**
2. **Test both success and failure scenarios**
3. **Verify API key security** remains intact
4. **Run full test suite** before committing

### Common Issues and Solutions

#### Korean Characters Bug
- **Issue**: Korean characters in documents cause AttributeError
- **Solution**: Proper Unicode handling and character encoding validation
- **Test**: Include non-ASCII test documents

#### API Integration Patterns
- **Timeout handling**: Set reasonable API timeouts
- **Rate limiting**: Respect API rate limits
- **Error classification**: Distinguish temporary vs permanent failures

## Code Quality Standards

### Helper Method Extraction
- **Extract common patterns** into helper methods
- **Avoid code duplication** in API transformation logic
- **Use descriptive method names** like `_transform_with_ai_and_fallback()`

### Documentation Requirements
- **Document all API integrations** with examples
- **Explain fallback behavior** clearly
- **Include security considerations** in method docs

## Environment Integration

### Prerequisites
```bash
# Ensure virtual environment is active
source venv/bin/activate

# Install dependencies
pip install -r requirements.txt

# Set up environment variables
export HUGGINGFACE_API_KEY="your-key-here"
```

### Development Testing
```bash
# Run tests locally
python -m pytest tests/ -v

# Test with API failures
HUGGINGFACE_API_KEY="" python -m pytest tests/ -v
```

## Collaboration Guidelines

### PR Review Focus Areas
1. **Security review**: No hardcoded credentials
2. **Test coverage**: All new code has tests
3. **Error handling**: Graceful fallback implementation
4. **Code duplication**: Proper helper method extraction

### Reviewer Response Best Practices
- **Address each security concern** individually
- **Provide test evidence** for fixes
- **Document API integration changes** clearly
- **Follow the GitHub PR workflow** from [github-pr-workflow.mdc](mdc:.cursor/rules/github-pr-workflow.mdc)

This development approach ensures secure, robust AI style matching with comprehensive testing and proper error handling.
---

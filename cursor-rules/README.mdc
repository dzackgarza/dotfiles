---
alwaysApply: true
description: Overview of cursor rules system for hobby projects with trigger conditions
globs:
- '**/.cursor/rules/**'
---

# Cursor Rules - Hobby Project System

This directory contains focused rules files for **hobby projects only** - personal projects that may not live beyond a weekend. The focus is on **getting working, correct software quickly** rather than enterprise-level robustness.

## Rule Files and Trigger Conditions

### core-philosophy.mdc (Always Applied)
- **ALWAYS ACTIVE** - fundamental principles for all hobby projects
- Crash-first philosophy, testing requirements, mathematics focus
- Applied to: all files in hobby projects

### environment-setup.mdc
- **Triggered by**: Python files, pyproject.toml, Makefile, requirements.txt
- UV package management, virtual environments, dependency checking
- Applied when working with Python development environment

### testing-validation.mdc  
- **Triggered by**: test files, tests directories, Makefiles
- End-to-end testing, print-style debugging, assertion-heavy validation
- Applied when writing or running tests

### frontend-ui.mdc
- **Triggered by**: HTML, CSS, JS, React, Vue, Svelte files
- Mathematics-focused UI, MathJax integration, established themes only
- Applied when building user interfaces

### project-organization.mdc
- **Triggered by**: README files, .gitignore, pyproject.toml, markdown files
- Project structure, memory management, documentation principles
- Applied when organizing or documenting projects

### search-retrieval.mdc
- **Triggered by**: files containing "search", "index", "retrieval", "query"
- Simple search implementation, basic indexing, content processing
- Applied when building search or retrieval functionality

### deployment-workflow.mdc
- **Triggered by**: Makefile, shell scripts, build.py, deploy.py
- Simple build processes, basic logging, manual deployment
- Applied when setting up build or deployment workflows

## Core Principles Applied to All Projects
- **CRASH IMMEDIATELY** on any error - no graceful handling
- **TEST BEFORE CLAIMING** - verify functionality before announcing success
- **USE EXISTING LIBRARIES** - research solutions before implementing
- **MATHEMATICS-FOCUSED** - all UIs handle MathJax, use established themes
- **UV EXCLUSIVELY** - never use pip directly, always use uv for Python
- **HOBBY PROJECT CONSTRAINTS** - prove viability quickly, avoid premature optimization
---
# Test sync

---
alwaysApply: false
description: Environment setup with uv exclusively, never pip/pyenv, for Python projects
globs:
- '**/*.py'
- '**/pyproject.toml'
- '**/Makefile'
- '**/requirements.txt'
---

# Environment Setup for Hobby Projects

## UV EXCLUSIVELY - NEVER PIP OR PYENV
- **NEVER USE PIP DIRECTLY** - use uv for all Python package management
- **NEVER USE PYENV** - uv handles Python version management better
- **UV IS FASTER, BETTER DEPENDENCY RESOLUTION, PARALLEL INSTALLS** - superior to pip
- **UV HAS SUPERIOR CACHING** - dramatically speeds up repeated installs
- **ALWAYS USE UV FOR ALL PYTHON TASKS** - environment creation, package installation, command execution

## How UV Works
- `uv venv` creates virtual environments (like `python -m venv` but better)
- `uv pip install package` installs packages (like `pip install` but faster)
- `uv run command` executes commands in the virtual environment automatically
- **UV AUTOMATICALLY FINDS .venv DIRECTORIES** - no manual activation needed
- UV uses complete dependency resolution before installation (prevents conflicts)
- UV runs installations in parallel (much faster than pip's sequential approach)

## Minimal Environment Management
- We never use the system's installation of Python
- We always use uv and source a venv
- All development must happen within the project's virtual environment
- **CRASH if not in proper virtual environment**

## Track Dependencies for Future-Me
- **KEEP TRACK OF DEPENDENCIES** - I might be me in a few weeks who forgot everything
- Provide "make setup" commands that work reliably
- Assert correct packages are installed or tell user exactly what to run
- Document dependencies in obvious places (pyproject.toml, Makefile, README)
- **CRASH with helpful error messages showing exactly what to install**

## Aggressive Dependency Checking
- Assert that required packages are available before using them
- Don't gracefully handle missing dependencies - CRASH with install instructions
- Check for required tools/commands and crash if missing
- Example: `assert_command_exists("uv", "Install uv: curl -LsSf https://astral.sh/uv/install.sh | sh")`
- **FAIL IMMEDIATELY if environment is not set up correctly**

## Basic Configuration
- Use environment variables for secrets and config
- Keep configuration simple and obvious
- Don't build complex configuration systems for hobby projects
- **CRASH if required config is missing - show user exactly what to set**

## Setup Commands for Reproducibility
- Always provide working "make setup" or equivalent using UV commands
- Commands should work from a fresh clone
- Assert that setup completed successfully
- Test setup commands regularly to ensure they still work
- **Setup commands must crash loudly if they fail**

## UV Command Patterns
- `uv venv` - create virtual environment (replaces `python -m venv`)
- `uv pip install -e .` - install project in development mode
- `uv pip install package` - install specific package
- `uv run python script.py` - run Python script in virtual environment
- `uv run pytest` - run tests in virtual environment (when using pytest later)
- **UV AUTOMATICALLY DETECTS AND USES .venv** - no manual activation required

## Symlink Management (For Consistency)
- Symlink ~/dotfiles/cursor-rules to projectroot/.cursor/rules in new projects
- This ensures consistent rule application across hobby projects
- But don't over-engineer the dotfiles system

## Dependencies - Aggressive Checking
- Install what you need, when you need it
- **ASSERT that required packages are installed before using them**
- Use uv for package management but keep requirements minimal
- **CRASH IMMEDIATELY if required packages are missing - show uv install command**
- Don't continue execution with missing dependencies

## No Infrastructure Automation Beyond Setup
- Don't build deployment scripts for hobby projects
- Don't create elaborate environment detection
- Provide simple, working setup commands using UV
- Let the user (me) handle infrastructure setup manually after setup commands

## Why UV Over Pip/Pyenv
- **FASTER INSTALLS** - parallel downloads and installations
- **BETTER DEPENDENCY RESOLUTION** - builds complete dependency graph first
- **SUPERIOR CACHING** - dramatically speeds up repeated operations
- **NO DEPENDENCY HELL** - proper conflict resolution before installation
- **AUTOMATIC VIRTUAL ENVIRONMENT DETECTION** - finds and uses .venv automatically
- **NO NEED FOR PYENV** - uv can download and manage Python versions directly
---

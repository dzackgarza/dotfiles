---
alwaysApply: false
description: Centralized management of custom notation and macro systems for mathematical
  and technical writing, enforcing semantic over syntactic notation
globs:
- '**/*.tex'
- '**/*.md'
---

# Custom Notation and Macro Systems

## Systematic Approach to Project-Specific Terminology

For technical writing projects with specialized notation, implement a **centralized macro/terminology system** to ensure consistency and maintainability.

### Core Principles

**1. Semantic Over Syntactic**: Use meaning-based commands rather than appearance-based
- ✅ `\naturalNumbers` or `\NN` (semantic)
- ❌ `\mathbb{N}` (syntactic - ties you to specific formatting)

**2. Single Source of Truth**: All custom notation defined in one canonical location
- LaTeX: Custom `.sty` package file
- Markdown: Centralized definitions file
- HTML: CSS classes + abbreviation system
- Technical docs: Glossary with expansion rules

**3. Mandatory Replacement Tables**: Explicitly document forbidden standard notation
- Prevents contributors from using inconsistent notation
- Makes onboarding clear and unambiguous

### Implementation Strategies

**LaTeX Projects**: Create custom package file
```latex
% Custom notation package: myproject-notation.sty
\newcommand{\NN}{\mathbf{N}}           % Natural numbers (bold style)
\newcommand{\generates}[1]{\langle #1 \rangle}  % Generating sets
\newcommand{\embeds}{\hookrightarrow}   % Embeddings (semantic name)
```

**Markdown Projects**: Use consistent abbreviation system
```markdown
<!-- Project notation standards -->
*[API]: Application Programming Interface
*[CRUD]: Create, Read, Update, Delete
<!-- Use expansion format that tools can process -->
```

**Technical Documentation**: Centralized glossary with expansion
```yaml
# notation.yaml
terminology:
  api_endpoint: "API endpoint"
  data_pipeline: "data processing pipeline"
  ml_model: "machine learning model"
```

### Enforcement Strategies

**Forbidden → Required Mapping**: Create explicit tables
| ❌ NEVER USE | ✅ ALWAYS USE | Why |
|---------------|---------------|-----|
| `API endpoint` | `{api_endpoint}` | Consistent expansion |
| `ML model` | `{ml_model}` | Standardized terminology |
| `database` | `{datastore}` | Project-specific term |

**Validation Tools**:
- Automated checking for forbidden patterns
- CI/CD integration to catch violations
- Pre-commit hooks for notation compliance

**Documentation Requirements**:
- New contributors must read notation guide
- Style guide includes comprehensive examples
- Violation resolution process documented

### Benefits

**Consistency**: All contributors use same notation automatically
**Maintainability**: Change notation project-wide by updating single definition
**Professionalism**: Consistent terminology improves document quality
**Accessibility**: Semantic names are more readable than cryptic syntax
**Future-proofing**: Can change appearance without changing source content

### Migration Strategy

For existing projects with inconsistent notation:

1. **Audit Current Usage**: Catalog all notation variants currently used
2. **Design Canonical System**: Choose preferred notation for each concept
3. **Create Replacement Mapping**: Document old → new mappings
4. **Systematic Replacement**: Use search/replace tools for bulk updates
5. **Validation Integration**: Add checks to prevent regression
6. **Documentation Update**: Update style guides with new requirements

Apply this approach to any technical writing project where consistency in specialized terminology is critical for professionalism and maintainability.
---

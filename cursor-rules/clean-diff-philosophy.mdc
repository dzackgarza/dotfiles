---
alwaysApply: false
description: Enforces semantic markup separation and clean diff practices for version
  control, making structural changes visible and reviewable
globs:
- '**/*.md'
- '**/*.tex'
---

# Clean Diff Philosophy for Writing Projects

## Semantic Markup Separation for Version Control

**CRITICAL PRINCIPLE**: Structure changes should be clearly visible in version control diffs, separate from content changes.

### The Problem

When markup and content are mixed on the same line, diffs become messy and semantic changes are hidden:

```diff
- :::{.theorem title="Important Result"} This theorem shows that every finite domain...
+ :::{.lemma title="Important Result"} This theorem shows that every finite domain...
```
**Issue**: You can't immediately see what changed - did the content change or just the type?

### The Solution: Line Separation

**✅ REQUIRED**: Semantic markup must be separated from content:

```markdown
:::{.theorem title="Important Result"}
This theorem shows that every finite domain...
:::
```

**Result**: Clean diffs show exactly what changed:
```diff
- :::{.theorem title="Important Result"}
+ :::{.lemma title="Important Result"}
  This theorem shows that every finite domain...
```

### Application to Different Markup Systems

**Markdown/Pandoc Fenced Divs:**
```markdown
:::{.note}
Content starts on next line.
:::
```

**HTML/XML:**
```html
<section class="theorem" id="main-result">
Content starts on next line.
</section>
```

**LaTeX Custom Environments:**
```latex
\begin{theorem}[Important Result]
Content starts on next line.
\end{theorem}
```

### Additional Clean Diff Practices

**Command References**: Cross-references should be normal text, not code formatting
- ❌ `\cite{author2023}` or `\ref{theorem1}`
- ✅ \cite{author2023} or \ref{theorem1}

**Line Breaks for Sentences**: Break lines at sentence boundaries for cleaner diffs
- Enables line-by-line review of arguments
- Makes content changes more visible

**Consistent Indentation**: Use consistent indentation for nested structures
- Enables structural changes to be clearly visible
- Makes refactoring easier to review

### Benefits

- **Faster code review**: Reviewers can immediately see what type of change occurred
- **Better conflict resolution**: Structural vs content conflicts are clearly separated
- **Cleaner history**: Version control history shows semantic progression clearly
- **Easier refactoring**: Can change document structure without affecting content review

Apply this philosophy to any markup-heavy writing project where version control and collaboration are important.
---

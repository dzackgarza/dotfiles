---
alwaysApply: false
description: Defines the standard development workflow, including environment setup,
  CLI usage, and best practices for code changes and collaboration
globs:
- dev/**
- dev/scripts/**
---

# Development Workflow

## Essential Setup Sequence
1. **ALWAYS start with**: `source diss-setup`
2. **Verify environment**: Check that `diss` command is available
3. **Before editing**: Test current file compilation status

## Editing Mathematical Content
1. **Check existing notation** in **[dev/tex/packages/GA_latex_macros.sty](mdc:dev/tex/packages/GA_latex_macros.sty)**
2. **Follow style guide** per **[STYLE.md](mdc:STYLE.md)**
3. **Use semantic macros**: `\gens{}`, `\ts{}`, etc.
4. **Test immediately**: `diss validate single [file]` after changes

## Commit Workflow
The **[.git/hooks/pre-commit](mdc:.git/hooks/pre-commit)** hook will:
- Test ALL markdown files for compilation
- Block commit if ANY file fails
- Show style warnings (but allow commit)

To bypass (NOT RECOMMENDED): `git commit --no-verify`

## Common Mathematical Editing Tasks

### Adding New Definitions
```markdown
:::{.definition title="Term Name"}
Mathematical content using `\gens{}`, `\ts{}` macros.
:::
```

### Complex Equations
- Single `&` per line in `align*`
- Multiple columns â†’ use `array{ll}` in `\[...\]`
- No `\[...\]` for simple display math

### Citations
- Use `\cite{key}` referencing **[dev/tex/Dissertation.bib](mdc:dev/tex/Dissertation.bib)**
- Never use backticks around citations

## Quality Assurance Tools
- **Individual validation**: Most reliable for debugging
- **Full reports**: `diss report` for project status
- **Style checking**: Built into pre-commit hook
- **Audit framework**: **[audits/README.md](mdc:audits/README.md)** for formal reviews

## Performance Tips
- Use validation caching for speed
- Focus on individual file testing during development
- Full validation only before major commits
- Monitor compilation times in validation output
---

---
alwaysApply: false
description: Covers the development workflow for the mathematical dissertation project,
  including canonical environment setup and CLI tool usage
globs:
- writing/sections/**
- dev/scripts/diss/**
---

# Dissertation Development Workflow

## Overview
This rule covers the development workflow for the mathematical dissertation project using custom CLI tools and environment setup.

## Environment Setup

### Canonical Environment
Always source the canonical environment before development:
```bash
source diss-setup  # Loads all canonical variables and functions
```

Key canonical variables set by [diss-setup](mdc:diss-setup):
- `CANONICAL_COMPILE_SCRIPT` - Single markdown file compilation
- `CANONICAL_TEMPLATE` - LaTeX template for consistent formatting
- `DISS_ROOT` - Project root directory
- `DATA_COLLECTOR_SCRIPT` - Python reports data collection
- `ZOTERO_CLI_PYTHON` - Canonical Zotero interface

## Primary CLI Tool: `diss`

The main development tool provides comprehensive functionality:

### Key Commands
```bash
diss build              # Smart build routing (files or complete dissertation)
diss build single pdf FILE  # Compile single markdown to PDF
diss validate          # Validate all markdown files
diss validate single FILE   # Debug individual file compilation
diss report            # Generate comprehensive status report
diss status            # Quick overview
```

### Validation Workflow
- **Use `diss validate single FILE`** for debugging compilation issues
- Validation uses same canonical system as reports for consistency
- Exit codes: 0 (success/✅), 1 (failure/❌)

## Project Structure

### Writing Content
- [writing/sections/1_chapter/](mdc:writing/sections/1_chapter/) - Chapter 1 (Lattice Theory)
- [writing/sections/2_chapter/](mdc:writing/sections/2_chapter/) - Chapter 2 (Compactifications)
- All content follows style guides in [STYLE.md](mdc:STYLE.md)

### Development Tools
- [dev/scripts/](mdc:dev/scripts/) - All development scripts
- [dev/tex/](mdc:dev/tex/) - LaTeX packages and templates
- [dev/tex/templates/DZG-Macros.sty](mdc:dev/tex/templates/DZG-Macros.sty) - Custom math macros

### Reports and Analysis
```bash
diss report                    # Comprehensive analysis
source dev/scripts/reports/main.sh  # Manual report generation
```

## Compilation Canonical Enforcement

### Critical Rules
1. **Always use canonical compilation** - never direct pandoc
2. **Single template enforced** via `$CANONICAL_TEMPLATE`
3. **All markdown→PDF via canonical scripts**
4. **Check environment variables** before any compilation

### Debugging Compilation Issues
1. `diss validate single FILE` - Test individual files
2. Check [dev/debug/](mdc:dev/debug/) for logs
3. Use canonical environment variables
4. Verify LaTeX macro availability in [DZG-Macros.sty](mdc:dev/tex/templates/DZG-Macros.sty)

## Style Guide System

### Three-Part Structure
- [MARKDOWN_STYLE.md](mdc:MARKDOWN_STYLE.md) - Technical formatting rules
- [MATHEMATICAL_STYLE.md](mdc:MATHEMATICAL_STYLE.md) - Mathematical notation (includes DZG macros)
- [FORMALIZATION_GUIDE.md](mdc:FORMALIZATION_GUIDE.md) - Computer verification patterns

### DZG Macro Enforcement
- **Always use DZG macros** when available (e.g., `\st` not `\mid`, `\ZZ` not `\mathbb{Z}`)
- Check [DZG-Macros.sty](mdc:dev/tex/templates/DZG-Macros.sty) for canonical definitions
- Resolve conflicts by consulting the custom package first

## Citation and Bibliography

### Zotero Integration
```bash
zotero search TERM     # Search Zotero database
zotero check CITATION  # Validate citation exists
```

### Citation Analysis
- Reports system tracks citation metrics and reuse
- 41+ unique citations across 56 files
- Bibliography integration via canonical compilation

## Quality Assurance

### Pre-commit Validation
- Automatic validation via pre-commit hooks
- Style guide compliance checking
- Citation and cross-reference validation
- Undefined macro detection

### Monitoring
- [docs/reports/](mdc:docs/reports/) - Generated analysis reports
- Validation cache in `.validation_cache/`
- Comprehensive health checks via `diss health-check`

This workflow ensures consistent, high-quality mathematical content with proper tooling support and quality assurance.
---

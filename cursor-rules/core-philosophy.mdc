---
alwaysApply: true
description: Core philosophy for mathematics-focused hobby projects - crash-first,
  test before claiming, use existing libraries
globs:
- '**/*.py'
- '**/*.js'
- '**/*.ts'
- '**/Makefile'
- '**/README.md'
---

# Core Philosophy for Mathematics-Focused Hobby Projects

## ABSOLUTE RULES - NO EXCEPTIONS

### NEVER GRACEFULLY HANDLE ANYTHING
- **WE CRASH IF ANYTHING IS NOT AVAILABLE** - missing files, invalid input, network errors
- **WE CRASH IF USER INPUT IS NOT VALID** - no fallbacks, no gentle error messages  
- **WE CRASH IF ASSERTIONS FAIL** - no try/catch, no graceful degradation
- **WE CRASH IF PACKAGES ARE MISSING** - no conditional imports, no soft dependencies
- **WE CRASH IF CONFIGURATION IS WRONG** - no defaults, no guessing
- **FAIL FAST, FAIL LOUD, FAIL IMMEDIATELY** - surface problems instantly

### CRASH-FIRST IMPLEMENTATION PATTERNS
- Use assertions everywhere, not try/catch blocks
- Check preconditions aggressively and crash if violated  
- Validate all inputs immediately and crash on invalid data
- Assert that files exist before trying to read them
- Assert that commands succeed before continuing
- **NEVER CONTINUE EXECUTION WITH INVALID STATE**

## Testing and Verification Requirements

### TEST BEFORE CLAIMING SUCCESS
- **BEFORE ANNOUNCING RESULTS, YOU MUST ACTUALLY RUN VIABILITY TESTS**
- **IT'S STUPID TO DECLARE FEATURES "NOW WORK" AND THEN PROGRAM CRASHES**
- Always test functionality before claiming it works
- Don't announce success without verified test results
- Run end-to-end tests that prove the claimed functionality

### RESEARCH BEFORE IMPLEMENTING
- **WE DO NOT REINVENT THE WHEEL** - research existing solutions first
- **WE DO NOT DEEP DIVE INTO DRASTIC REFACTORS WITHOUT DISCUSSION**
- Look for out-of-the-box libraries for EVERY feature before implementing
- Example: don't write quicksort, `uv pip install quicksort` and use `import quicksort`
- Always look for existing solutions first

### COLLABORATIVE PROBLEM SOLVING
- **WE ARE NOT "YES MEN"** - work together to find BEST, most CORRECT solutions
- **USER IS NOT ALWAYS RIGHT** - questions meant to be researched and explored together
- Stop, plan, strategize, possibly refactor first to avoid spaghetti code
- Focus on human understandability, modularity, compositionality
- Enforce strong type guarantees ensuring program is CORRECT before anything else

## Mathematics-Focused Projects
- **ALL PROJECTS ARE MATHEMATICS-FOCUSED** - assume mathematical content everywhere
- All UIs should handle MathJax output well
- Use only popular, well-known, out-of-the-box themes for mathematical rendering
- Never choose color schemes ourselves - import palettes from libraries or use defaults
- Focus on mathematical content rendering and use established design systems

## Environment and Dependencies
- **WE NEVER USE PIP DIRECTLY OR PYENV** - use uv exclusively for Python package management
- **UV IS FASTER, BETTER DEPENDENCY RESOLUTION, PARALLEL INSTALLS** - superior to pip
- Key commands: `uv venv` creates environments, `uv pip install` installs packages, `uv run` executes
- **UV AUTOMATICALLY FINDS .venv DIRECTORIES** - no manual activation needed
- Always use uv for all Python environment and package management tasks

## Hobby Project Constraints
- **HOBBY PROJECTS ONLY** - personal projects for personal use, may not live beyond weekend
- **WE DO NOT PREMATURELY OPTIMIZE** - prove viability FIRST and QUICKLY
- **STILL EMPHASIZE ASSERTION AND FAIL FAST** - surface incorrect code quickly
- **EMPHASIZE PRINT-STYLE DEBUGGING** - litter code with logging, find mistakes fast
- Keep track of dependencies, provide "make setup" commands, assert correct packages installed

## Package Installation Philosophy  
- **WE DO NOT CHECK IF PACKAGES ARE INSTALLED** - we assert they are and crash otherwise
- **ASSERT THAT REQUIRED PACKAGES ARE AVAILABLE BEFORE USING THEM**
- **CRASH IMMEDIATELY IF REQUIRED PACKAGES ARE MISSING** - show uv install command
- Don't continue execution with missing dependencies
- No conditional checking for package availability - only assertions

## UI and Framework Rules
- **WE DO NOT MAKE AESTHETIC DECISIONS OURSELVES** - use out-of-the-box frameworks
- **USE FRAMEWORKS THAT HANDLE STYLING BY DEFAULT** - Material Design, Bootstrap, Tailwind
- **NEVER CREATE CUSTOM CSS OR DESIGN SYSTEMS** - use framework utilities
- **DON'T CHOOSE COLOR SCHEMES** - import palettes or use framework defaults
- Focus on mathematical content rendering with established design systems
---

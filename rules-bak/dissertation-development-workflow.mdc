---
alwaysApply: false
description: Best practices for dissertation development, including testing, validation,
  documentation, and collaboration protocols
globs:
- writing/sections/**
- dev/scripts/diss/**
---

# Dissertation Development Workflow

## Core Tools and Environment

### Diss CLI Tool
The project uses a custom `diss` CLI tool for all build and validation operations. Key commands:

- **Build**: `diss build` - Smart routing for files or complete dissertation
- **Validate**: `diss validate single FILE` - Individual file validation with real PDF compilation
- **Status**: `diss report` - Comprehensive dissertation status report
- **Health Check**: `diss health-check` - Full system health verification

### Environment Setup
- **Main environment**: Source [diss-setup](mdc:diss-setup) for canonical environment variables
- **Debug environment**: Source [dev/scripts/shared-scripts/diss-debug-env](mdc:dev/scripts/shared-scripts/diss-debug-env) for lightweight debugging
- **Validation**: All tools use canonical compilation through `$CANONICAL_COMPILE_SCRIPT`

## File Structure and Organization

### Writing Sections
- **Chapter 1**: [writing/sections/1_chapter/](mdc:writing/sections/1_chapter) - Lattice theory
- **Chapter 2**: [writing/sections/2_chapter/](mdc:writing/sections/2_chapter) - K3 surfaces and compactifications
- **Style Guides**:
  - [STYLE.md](mdc:STYLE.md) - Main style guide index
  - [MARKDOWN_STYLE.md](mdc:MARKDOWN_STYLE.md) - Technical formatting rules
  - [MATHEMATICAL_STYLE.md](mdc:MATHEMATICAL_STYLE.md) - Mathematical notation conventions
  - [FORMALIZATION_GUIDE.md](mdc:FORMALIZATION_GUIDE.md) - Computer verification patterns (research only)

### Development Scripts
- **Compilation**: [dev/scripts/compilation/](mdc:dev/scripts/compilation) - Single file and directory compilation
- **Shared Scripts**: [dev/scripts/shared-scripts/](mdc:dev/scripts/shared-scripts) - Validation, debugging, testing utilities
- **Reports**: [dev/scripts/reports/](mdc:dev/scripts/reports) - Status reporting and health checks

## Validation and Quality Assurance

### Pre-commit Validation
The repository has a zero-tolerance compilation policy enforced by pre-commit hooks:
- Validates ALL markdown files individually before commit
- Blocks commits if ANY file fails compilation
- Provides style warnings for semantic macro violations
- Uses caching for performance optimization

### Style Compliance Requirements
Follow the factored style guide system:
- **[MARKDOWN_STYLE.md](mdc:MARKDOWN_STYLE.md)**: Technical formatting (fenced divs, math environments, spacing)
- **[MATHEMATICAL_STYLE.md](mdc:MATHEMATICAL_STYLE.md)**: Mathematical notation and conventions
  - **Semantic Macros**: Use `\gens{}` instead of `\langle...\rangle`
  - **Set Notation**: Use `\ts{}` for all set expressions
  - **One Ampersand Rule**: No multiple `&` symbols in align environments
  - **Mathematical Environments**: Prefer `array` over complex `align*` structures
  - **STRONGLY ENCOURAGED**: Include SageMath/Lean verification as HTML comments near theorems
- **[FORMALIZATION_GUIDE.md](mdc:FORMALIZATION_GUIDE.md)**: Computer verification (research only, not for thesis)

### File Validation Process
1. **Individual Validation**: `diss validate single FILE`
2. **Compilation Test**: Real PDF compilation using XeLaTeX
3. **Style Checking**: Automated detection of common violations
4. **Error Reporting**: Clear error messages with fix instructions

## Common Development Patterns

### Fixing Compilation Issues
When fixing LaTeX compilation errors:
1. **Test individually**: `diss validate single FILE` for each modified file
2. **Check common issues**: Undefined macros (`\ZZ`, `\CC`, `\restr`), unmatched braces, Unicode symbols
3. **Verify style compliance**: Check for `\langle...\rangle` and multiple ampersands
4. **Run pre-commit validation**: Ensure all files still compile

### Style Matcher Development
For AI-powered style matching in [dev/style-matching/](mdc:dev/style-matching):
- **Security**: Always load API keys from environment variables
- **Testing**: Mock AI calls in tests with proper fallback scenarios
- **Code Quality**: Extract common patterns into helper methods
- **Environment**: Use virtual environment with [dev/style-matching/requirements.txt](mdc:dev/style-matching/requirements.txt)

### Citation Management
- **Zotero Integration**: Use [dev/scripts/zotero/](mdc:dev/scripts/zotero) for canonical Zotero operations
- **Bibliography**: Main bibliography in [dev/tex/Dissertation.bib](mdc:dev/tex/Dissertation.bib)
- **Validation**: Check citations using report system for accuracy

## Git Workflow and Branch Management

### Branch Naming
- **Feature branches**: `feature/description`
- **Fix branches**: `fix/description`
- **Current example**: `fix/comprehensive-compilation-and-style-fixes`

### Commit Message Standards
For reviewer comment fixes:
```
Fix reviewer comments: [brief summary]

- [Issue 1]: [specific fix with technical details]
- [Issue 2]: [specific fix with technical details]
- Verification: [testing evidence]

Addresses all X reviewer comments on PR #Y.
```

### Quality Gates
- **Pre-commit hooks**: Block commits with compilation failures
- **PR validation**: All changes must maintain 100% compilation success
- **Style enforcement**: Warnings for common violations
- **Documentation**: Update relevant documentation with changes

## Debugging and Troubleshooting

### Common Issues
1. **Compilation Failures**: Use `diss validate single FILE` to isolate issues
2. **Missing Macros**: Check [dev/tex/packages/](mdc:dev/tex/packages) for macro definitions
3. **Environment Issues**: Source canonical environment with [diss-setup](mdc:diss-setup)
4. **Style Violations**: Run style checks during pre-commit validation

### Debug Tools
- **Individual file testing**: `diss validate single FILE`
- **Health checks**: `diss health-check` for comprehensive system status
- **Reports**: `diss report` for detailed project analysis
- **Debug environment**: Lightweight tools in shared-scripts for quick debugging

## Best Practices

### Code Changes
- **Always test individually**: Validate each modified file
- **Maintain compilation**: Zero tolerance for broken LaTeX
- **Follow style guide**: Enforce semantic macro usage
- **Document changes**: Update documentation for significant modifications

### Collaboration
- **Professional PR responses**: Use structured templates with verification
- **Comprehensive testing**: Test fixes before committing
- **Clear communication**: Provide specific commit references and testing evidence
- **Learning focus**: Treat feedback as improvement opportunities

This workflow ensures high-quality, consistently compilable dissertation content while maintaining professional development standards.
---
